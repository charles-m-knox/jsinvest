{"version":3,"sources":["main/models.tsx","main/account.tsx","main/strategy.tsx","main/balancer.tsx","main/helpers.tsx","main/investments.tsx","main/quote.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultHeaders","AccountView","props","accounts","idx","onAcctNameChange","onAcctBalanceChange","onAcctStrategyChange","onAcctAdd","onAcctDel","getStrategies","className","Form","Row","Col","sm","InputGroup","Prepend","Text","Control","type","placeholder","data-idx","id","value","name","onChange","e","target","data-balance","balance","onBlur","toLocaleString","style","currency","balanceAsNumbers","replace","console","log","newAmount","Number","parseFloat","isNaN","as","strategy","map","i","ButtonGroup","aria-label","Button","onClick","variant","disabled","length","StrategyView","strategies","onStrategyNameChange","onStrategyAdd","onStrategyDel","onStrategySymbolAdd","onStrategySymbolDel","onStrategySymbolChange","onAllocationTypeChange","onAllocationAmountChange","onAllocationAdd","onAllocationDel","Fragment","Append","symbols","symbol","data-symbol-idx","newSymbol","toUpperCase","allocations","allocation","amount","BalanceAccount","account","quotes","results","groups","forEach","Object","keys","group","groupAllocation","allocationType","filter","warn","getAllocation","groupAllocationAmount","allocPercentageFromTotal","allocPerSymbol","j","quote","k","rawQuote","shares","Math","floor","price","totalAllocated","sharePrice","remainder","idealAllocation","idealGroupAllocationPercentage","idealSymbolAllocationPercentage","newResult","purchasePrice","allocated","symbolAllocationPercentage","groupAllocationPercentage","fromBalance","push","asCurrency","asPercentage","toFixed","InvestmentsView","getBasicStrategy","getBasicAllocation","getConfig","accts","strats","setStrategies","newStrategies","setStrategiesState","newStrategiesYaml","yaml","setExportStr","setAccounts","newAccounts","setAccountsState","useState","setResults","importStr","setImportStr","exportStr","addStrategy","delStrategy","s","symbolIdx","splice","allocationIndex","newType","newName","newBalance","newStrategy","strategiesObj","importExportOpen","setImportExportOpen","step1Open","setStep1Open","step2Open","setStep2Open","step3Open","setStep3Open","tableOpen","setTableOpen","Jumbotron","aria-controls","aria-expanded","conf","configYamlStr","setExportStrSimple","Container","Collapse","in","cursor","Group","controlId","Label","rows","readOnly","config","setConfig","navigator","clipboard","writeText","_strategy","_account","balancedResults","allSymbols","url","join","axios","get","then","res","response","data","quoteResponse","result","rq","tQuote","change","changePercent","isActive","isRegularTradingSession","marketState","regularMarketPrice","regularMarketChange","regularMarketChangePercent","postMarketPrice","preMarketPrice","postMarketChange","postMarketChangePercent","preMarketChange","preMarketChangePercent","TransformQuote","catch","err","error","GetQuotes","Array","isArray","toLowerCase","r","JSON","stringify","Table","striped","bordered","hover","responsive","header","csvRows","getResultsAsCSV","App","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35ad343d.chunk.js","sourcesContent":["/**\n * An Allocation is a definition for string-number pairs.\n * Example: { 'small': 10.0, 'medium': 10.0 }\n * TODO: implement this correctly\n *\n * @export\n * @interface Allocation\n */\nexport interface Allocation {\n    type: string;\n    amount: number;\n}\n\nexport interface Account {\n    name: string;\n    balance: number;\n    strategy: string;\n}\n\nexport interface Symbol {\n    symbol: string;\n    type: string;\n}\n\nexport interface Strategy {\n    name: string;\n    symbols: Symbol[];\n    allocations: Allocation[];\n}\n\nexport interface Result {\n    name: string;                       // \"Name\",\n    symbol: string;                     // \"Symbol\",\n    type: string;                       // \"Type\",\n    shares: number;                     // \"Shares\",\n    sharePrice: number;                 // \"Share Price\",\n    purchasePrice: number;              // \"Purchase Price\",\n    allocated: number;                  // \"Allocated\",\n    remainder: number;                  // \"Remainder\",\n    symbolAllocationPercentage: number; // \"Symbol Allocation %\",\n    groupAllocationPercentage: number;  // \"Group Allocation %\",\n    fromBalance: number;                // \"From Balance\",\n}\n\nexport const ResultHeaders = [\n    \"Name\",\n    \"Symbol\",\n    \"Type\",\n    \"Shares\",\n    \"Share Price\",\n    \"Purchase Price\",\n    \"Allocated\",\n    \"Remainder\",\n    \"Symbol Allocation %\",\n    \"Group Allocation %\",\n    \"From Balance\",\n]\n\nexport interface Config {\n    accounts: Account[];\n    strategies: Strategy[];\n}\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Account } from './models'\n\nexport interface AccountViewProps {\n    accounts: Account[];\n    idx: number;\n    onAcctNameChange: (idx: number, newName: string) => void;\n    onAcctBalanceChange: (idx: number, newBalance: number) => void;\n    onAcctStrategyChange: (idx: number, newStrategy: string) => void;\n    onAcctAdd: (idx: number) => void;\n    onAcctDel: (idx: number) => void;\n    getStrategies: () => string[];\n}\n\nexport const AccountView = function (props: AccountViewProps) {\n    const {\n        accounts,\n        idx,\n        onAcctNameChange,\n        onAcctBalanceChange,\n        onAcctStrategyChange,\n        onAcctAdd,\n        onAcctDel,\n        getStrategies,\n    } = props;\n\n    return (\n        <div className=\"mb-3\">\n            <Form>\n                <Row>\n                    <Col sm={3}>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    Name\n                        </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"401k\"\n                                data-idx={idx}\n                                id={`accounts-${idx}-name`}\n                                value={accounts[idx].name}\n                                onChange={(e: any): void => {\n                                    onAcctNameChange(idx, e.target.value);\n                                }} />\n                        </InputGroup>\n                    </Col>\n                    <Col sm={4}>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    Balance\n                        </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"401k\"\n                                data-idx={idx}\n                                data-balance={accounts[idx].balance}\n                                id={`accounts-${idx}-balance`}\n                                value={accounts[idx].balance}\n                                onBlur={(e: React.FocusEvent<HTMLInputElement>): void => {\n                                    e.target.value = accounts[idx].balance.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\n                                }}\n                                onChange={(e: any): void => {\n                                    const balanceAsNumbers = e.target.value.replace(/[^0-9.-]+/g, \"\");\n                                    console.log(balanceAsNumbers);\n                                    if (balanceAsNumbers === '') {\n                                        onAcctBalanceChange(idx, 0.0);\n                                        return;\n                                    }\n                                    const newAmount = Number.parseFloat(balanceAsNumbers);\n                                    if (Number.isNaN(newAmount)) {\n                                        return;\n                                    }\n                                    onAcctBalanceChange(idx, newAmount);\n                                }} />\n                        </InputGroup>\n                    </Col>\n                    <Col sm={4}>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    Strategy\n                        </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control as=\"select\"\n                                id={`accounts-${idx}-strategy`}\n                                value={accounts[idx].strategy}\n                                onChange={(e: any): void => {\n                                    onAcctStrategyChange(idx, e.target.value);\n                                }}>\n                                {\n                                    getStrategies().map((strategy: string, i: number): JSX.Element => {\n                                        return (\n                                            <option key={`account-${idx}-strategy-option-${i}`}>{strategy}</option>\n                                        )\n                                    })\n                                }\n                            </Form.Control>\n                            {/* <Form.Control\n                                type=\"text\"\n                                placeholder=\"401k\"\n                                data-idx={idx}\n                                id={`accounts-${idx}-strategy`}\n                                value={accounts[idx].strategy}\n                                onChange={(e: any): void => {\n                                    onAcctStrategyChange(idx, e.target.value);\n                                }} /> */}\n                        </InputGroup>\n                    </Col>\n                    <Col sm={1}>\n                        <ButtonGroup aria-label={`accounts-manage-buttons-${idx}`}>\n                            <Button\n                                onClick={() => {\n                                    onAcctAdd(idx);\n                                }}>\n                                +\n                            </Button>\n                            <Button variant=\"danger\"\n                                disabled={accounts.length <= 1}\n                                onClick={() => {\n                                    onAcctDel(idx);\n                                }}>\n                                -\n                            </Button>\n                        </ButtonGroup>\n                    </Col>\n                </Row>\n            </Form>\n        </div >\n\n    )\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { Symbol, Strategy, Allocation } from './models'\n\nexport interface StrategyViewProps {\n    idx: number;\n    strategies: Strategy[]; // strategies state directly passed in\n    onStrategyNameChange: (e: any, idx: number) => void;\n    onStrategyAdd: () => void;\n    onStrategyDel: (idx: number) => void;\n    onStrategySymbolAdd: (idx: number) => void;\n    onStrategySymbolDel: (idx: number, symbolIdx: number) => void;\n    onStrategySymbolChange: (idx: number, symbolIdx: number, newSymbol: Symbol) => void;\n    onAllocationTypeChange: (idx: number, allocationIndex: number, newType: string) => void;\n    onAllocationAmountChange: (idx: number, allocationIndex: number, newAmount: number) => void;\n    onAllocationAdd: (idx: number) => void;\n    onAllocationDel: (idx: number, allocationIndex: number) => void;\n}\n\nconst StrategyView = function (props: StrategyViewProps) {\n    const {\n        idx,\n        strategies,\n        onStrategyNameChange,\n        onStrategyAdd,\n        onStrategyDel,\n        onStrategySymbolAdd,\n        onStrategySymbolDel,\n        onStrategySymbolChange,\n        onAllocationTypeChange,\n        onAllocationAmountChange,\n        onAllocationAdd,\n        onAllocationDel,\n    } = props;\n\n    return (\n        <React.Fragment key={`strategy-${idx}`}>\n            <Row>\n                <Col>\n                    <InputGroup className=\"mb-3\">\n                        <InputGroup.Prepend>\n                            <InputGroup.Text>\n                                Name\n                            </InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"401k\"\n                            data-idx={idx}\n                            name={`strategy-name-${idx}`}\n                            id={`strategy-name-${idx}`}\n                            value={strategies[idx].name}\n                            onChange={(e: any) => {\n                                onStrategyNameChange(e, idx);\n                            }}\n                        />\n                        <InputGroup.Append>\n                            <Button\n                                className=\"\"\n                                variant=\"outline-secondary\"\n                                onClick={onStrategyAdd}>\n                                Add strategy\n                            </Button>\n                            <Button\n                                className=\"\"\n                                variant=\"outline-secondary\"\n                                disabled={strategies.length <= 1}\n                                onClick={() => {\n                                    onStrategyDel(idx);\n                                }}>\n                                -\n                            </Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Col>\n            </Row>\n            {/* <Row>\n                <Col sm={5}>\n                    <p>\n                        For the investment strategy \"{strategies[idx].name}\", choose the ETFs/stocks you want to invest in on the left.\n                    </p>\n                </Col>\n                <Col sm={7}>\n                    <p>\n                        On the right, you can classify each ETF/stock. For example, SCHB is a broad market index ETF, so you might want to classify it as \"broad\". Similarly, SCHM is a medium-cap index ETF, so you could label it as \"medium\".\n                    </p>\n                </Col>\n            </Row> */}\n            <Row>\n                <Col sm={1}></Col>\n                <Col sm={11}>\n                    <p className=\"text-muted\">\n                        <i><b>Symbols</b> - choose the symbols (stock/ETF names) and their allocations (grouping) here.</i>\n                    </p>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {\n                        strategies[idx].symbols.map((symbol: Symbol, i: number): JSX.Element => {\n                            return (\n                                <Row key={`strategy-${idx}-symbols-${i}-row`}>\n                                    <Col sm={1}></Col>\n                                    <Col sm={5}>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Text>\n                                                    Symbol\n                                                </InputGroup.Text>\n                                            </InputGroup.Prepend>\n                                            <Form.Control\n                                                type=\"text\"\n                                                placeholder=\"SCHB\"\n                                                data-idx={idx}\n                                                data-symbol-idx={i}\n                                                id={`strategy-${idx}-symbols-${i}-symbol`}\n                                                value={strategies[idx].symbols[i].symbol}\n                                                onChange={(e: any): void => {\n                                                    const newSymbol = strategies[idx].symbols[i];\n                                                    newSymbol.symbol = e.target.value.toUpperCase();\n                                                    onStrategySymbolChange(idx, i, newSymbol);\n                                                }} />\n                                        </InputGroup>\n                                    </Col>\n                                    <Col sm={6}>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Text>\n                                                    Type\n                                                </InputGroup.Text>\n                                            </InputGroup.Prepend>\n                                            <Form.Control\n                                                type=\"text\"\n                                                placeholder=\"broad\"\n                                                data-idx={idx}\n                                                data-symbol-idx={i}\n                                                id={`strategy-${idx}-symbols-${i}-type`}\n                                                value={strategies[idx].symbols[i].type}\n                                                onChange={(e: any): void => {\n                                                    const newSymbol = strategies[idx].symbols[i];\n                                                    newSymbol.type = e.target.value;\n                                                    onStrategySymbolChange(idx, i, newSymbol);\n                                                }} />\n                                            <InputGroup.Append>\n                                                <Button\n                                                    className=\"\"\n                                                    variant=\"outline-secondary\"\n                                                    onClick={() => {\n                                                        onStrategySymbolAdd(idx);\n                                                    }}>\n                                                    +\n                                                </Button>\n                                                <Button\n                                                    className=\"\"\n                                                    variant=\"outline-secondary\"\n                                                    disabled={strategies[idx].symbols.length <= 1}\n                                                    onClick={() => {\n                                                        onStrategySymbolDel(idx, i);\n                                                    }}>\n                                                    -\n                                                </Button>\n                                            </InputGroup.Append>\n                                        </InputGroup>\n                                    </Col>\n                                </Row>\n                            )\n                        })\n                    }\n                </Col>\n            </Row>\n            {/* <Row>\n                <Col sm={5}>\n                    <p>\n                        For the investment strategy \"{strategies[idx].name}\", choose how you want to distribute money across the labels from above. For example, since we classified \"broad\" and \"medium\" above, we should have \"broad\" and \"medium\" entries as well.\n                    </p>\n                </Col>\n                <Col sm={7}>\n                    <p>\n                        On the right, you can specify what percentage of the total money will be allocated to this category. For example, if you wanted to allocate 50% of one of your accounts to all symbols with the \"broad\" classification, you would put 50% in this column, and in the left column, you would put \"broad\".\n                    </p>\n                </Col>\n            </Row> */}\n            <Row>\n                <Col sm={1}></Col>\n                <Col sm={11}>\n                    <p className=\"text-muted\">\n                        <i><b>Allocations</b> - choose how to group and divide the above stocks/ETFs here.</i>\n                    </p>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {\n                        strategies[idx].allocations.map((allocation: Allocation, i: number): JSX.Element => {\n                            return (\n                                <Row key={`strategy-${idx}-allocations-${i}-row`}>\n                                    <Col sm={1}></Col>\n                                    <Col sm={5}>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Text>\n                                                    Allocation\n                                            </InputGroup.Text>\n                                            </InputGroup.Prepend>\n                                            <Form.Control\n                                                type=\"text\"\n                                                placeholder=\"broad\"\n                                                data-idx={idx}\n                                                data-symbol-idx={i}\n                                                id={`strategy-${idx}-allocations-${i}-type`}\n                                                value={strategies[idx].allocations[i].type}\n                                                onChange={(e: any): void => {\n                                                    onAllocationTypeChange(idx, i, e.target.value);\n                                                }} />\n                                        </InputGroup>\n                                    </Col>\n                                    <Col sm={6}>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Text>\n                                                    Amount (%)\n                                                </InputGroup.Text>\n                                            </InputGroup.Prepend>\n                                            <Form.Control\n                                                type=\"number\"\n                                                placeholder=\"broad\"\n                                                data-idx={idx}\n                                                data-symbol-idx={i}\n                                                id={`strategy-${idx}-allocations-${i}-amount`}\n                                                value={strategies[idx].allocations[i].amount}\n                                                onChange={(e: any): void => {\n                                                    const newAmount = Number.parseFloat(e.target.value);\n                                                    if (Number.isNaN(newAmount)) {\n                                                        return;\n                                                    }\n                                                    onAllocationAmountChange(idx, i, newAmount);\n                                                }} />\n                                            <InputGroup.Append>\n                                                <Button\n                                                    className=\"\"\n                                                    variant=\"outline-secondary\"\n                                                    onClick={() => {\n                                                        onAllocationAdd(idx);\n                                                    }}>\n                                                    +\n                                                </Button>\n                                                <Button\n                                                    className=\"\"\n                                                    variant=\"outline-secondary\"\n                                                    disabled={strategies[idx].allocations.length <= 1}\n                                                    onClick={() => {\n                                                        onAllocationDel(idx, i);\n                                                    }}>\n                                                    -\n                                                </Button>\n                                            </InputGroup.Append>\n                                        </InputGroup>\n                                    </Col>\n                                </Row>\n                            )\n                        })\n                    }\n                </Col>\n            </Row>\n            {/* <Row>\n                <Col>\n                    <Button className=\"mb-3\" onClick={onStrategyAdd}>\n                        Add another strategy\n                    </Button>\n                </Col>\n                <Col>\n                    {strategies.length > 1 && (\n                        <Button\n                            className=\"mb-3\"\n                            variant=\"danger\"\n                            onClick={() => {\n                                onStrategyDel(idx);\n                            }}>\n                            Delete this strategy\n                        </Button>\n                    )}\n                </Col>\n            </Row> */}\n        </React.Fragment >\n    );\n}\n\nexport default StrategyView;\n\n","import { Account, Allocation, Strategy, Symbol, Result } from './models';\nimport { Quote } from './quote';\n\n// const getStrategyForSymbol = (strategies: Strategy[], symbolName: string): Strategy | null => {\n//     const result = strategies.filter((strategy: Strategy) => {\n//         const strategySearchResults = strategy.symbols.filter((symbol: Symbol) => {\n//             if (symbol.symbol === symbolName) {\n//                 return symbol\n//             }\n//         })\n//     })\n//     if (results.length === 1) {\n//         return results[0]\n//     }\n//     return null\n// }\n\nconst getAllocation = (strategy: Strategy, allocationType: string): Allocation => {\n    const results = strategy.allocations.filter((allocation: Allocation, i: number) => {\n        if (allocation.type === allocationType) {\n            console.log(allocation);\n            return allocation;\n        }\n    })\n\n    if (results.length === 1) {\n        return results[0];\n    }\n    console.warn('matched multiple or no allocations, should only have found one');\n    return { type: '', amount: 0.0 };\n}\n\nexport const BalanceAccount = (account: Account, strategy: Strategy, quotes: Quote[]): Result[] => {\n    // first, group symbols according to their classification\n    // https://github.com/charles-m-knox/goinvest/blob/main/helpers/helpers.go#L21-L28\n    const results: Result[] = [];\n    const groups: any = {};\n    strategy.symbols.forEach((symbol: Symbol, i: number) => {\n        if (!groups[symbol.type]) {\n            groups[symbol.type] = {};\n        }\n        groups[symbol.type][symbol.symbol] = {};\n    });\n\n    console.log(groups);\n\n    // now that symbols are all grouped, proceed to apply allocations\n    Object.keys(groups).forEach((group: string, i: number) => {\n        // Need to retrieve the allocation percentage for a group by its name\n        // strategy -> allocations -> group\n        const groupAllocation = getAllocation(strategy, group);\n        if (groupAllocation.type) {\n            // example: if 3 symbols are \"large\", and the \"large\" group gets 30%\n            // of $10k, groupAllocationAmount = 3000\n            const groupAllocationAmount = (groupAllocation.amount / 100.0) * account.balance;\n\n            // example: if 3 symbols are \"large\", and the \"large\" group gets 30%\n            // of $10k, allocPercentageFromTotal = 10%\n            const allocPercentageFromTotal = groupAllocation.amount / (Object.keys(groups[group]).length)\n\n            // example: if 3 symbols are \"large\", and the \"large\" group gets 30%\n            // of $10k, allocPerSymbol = 1000\n            const allocPerSymbol = groupAllocationAmount / (Object.keys(groups[group]).length)\n\n            console.log(groupAllocationAmount, allocPercentageFromTotal, allocPerSymbol);\n            Object.keys(groups[group]).forEach((symbol: string, j: number) => {\n                quotes.forEach((quote: Quote, k: number) => {\n                    if (quote.rawQuote.symbol === symbol) {\n                        const shares = Math.floor(allocPerSymbol / quote.price);\n                        const totalAllocated = shares * quote.price;\n                        groups[group][symbol] = {\n                            shares: shares,\n                            sharePrice: quote.price,\n                            remainder: allocPerSymbol - totalAllocated,\n                            totalAllocated: totalAllocated,\n                            idealAllocation: allocPerSymbol,\n                            idealGroupAllocationPercentage: groupAllocation.amount,\n                            idealSymbolAllocationPercentage: allocPercentageFromTotal,\n                        };\n                        const newResult = {\n                            name: account.name,\n                            symbol: symbol,\n                            type: group,\n                            shares: shares,\n                            sharePrice: quote.price,\n                            purchasePrice: totalAllocated,\n                            allocated: allocPerSymbol,\n                            remainder: groups[group][symbol].remainder,\n                            symbolAllocationPercentage: groups[group][symbol].idealSymbolAllocationPercentage,\n                            groupAllocationPercentage: groups[group][symbol].idealGroupAllocationPercentage,\n                            fromBalance: account.balance,\n                        };\n                        console.log(newResult);\n                        results.push(newResult);\n                    }\n                })\n            })\n            console.log(groups);\n        }\n    });\n    return results;\n}\n","export const asCurrency = (amount: number): string => {\n    return amount.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\n}\nexport const asPercentage = (amount: number): string => {\n    return `${amount.toFixed(2)}%`;\n}\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n// import InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport { Config, Symbol, Strategy, Account, Allocation, Result, ResultHeaders } from './models'\nimport { AccountView } from './account'\nimport StrategyView from './strategy';\nimport { BalanceAccount } from './balancer';\nimport { ResultsView } from './results';\nimport { GetQuotes } from './quote';\nimport Collapse from 'react-bootstrap/Collapse'\nimport * as yaml from 'yaml';\nimport { asCurrency, asPercentage } from './helpers';\n\n// const yaml = require('js-yaml');\n\nconst InvestmentsView = () => {\n    const getBasicSymbol = (): Symbol => {\n        return {\n            symbol: 'SCHB',\n            type: 'broad',\n        }\n    }\n\n    const getBasicStrategy = (): Strategy => {\n        return {\n            name: 'AggressiveRetirement',\n            symbols: [getBasicSymbol()],\n            allocations: [getBasicAllocation()],\n        }\n    }\n\n    const getBasicAccount = (): Account => {\n        return {\n            name: '401k',\n            balance: 100000.0,\n            strategy: 'AggressiveRetirement',\n        }\n    }\n\n    const getBasicAllocation = (): Allocation => {\n        return {\n            type: 'broad',\n            amount: 100.0,\n        }\n    }\n\n    const getBasicResult = (): Result => {\n        return {\n            name: 'AggressiveRetirement',\n            symbol: 'SCHB',\n            type: 'broad',\n            shares: 0.0,\n            sharePrice: 0.0,\n            purchasePrice: 0.0,\n            allocated: 0.0,\n            remainder: 0.0,\n            symbolAllocationPercentage: 0.0,\n            groupAllocationPercentage: 0.0,\n            fromBalance: 0.0,\n        }\n    }\n\n    const getConfig = (accts: Account[], strats: Strategy[]): Config => {\n        const conf: Config = {\n            accounts: accts,\n            strategies: strats,\n        };\n\n        return conf;\n    }\n\n    const setStrategies = (newStrategies: Strategy[]) => {\n        setStrategiesState(newStrategies);\n        const newStrategiesYaml = yaml.stringify(getConfig(accounts, newStrategies), yaml.defaultOptions);\n        setExportStr(newStrategiesYaml);\n    }\n\n    const setAccounts = (newAccounts: Account[]) => {\n        setAccountsState(newAccounts);\n        const newStrategiesYaml = yaml.stringify(getConfig(newAccounts, strategies), yaml.defaultOptions);\n        setExportStr(newStrategiesYaml);\n    }\n\n    const setConfig = (config: Config, configYamlStr: string) => {\n        setStrategiesState(config.strategies);\n        setAccountsState(config.accounts);\n        setExportStr(configYamlStr);\n    }\n\n    const setExportStrSimple = () => {\n        const conf: Config = {\n            accounts: accounts,\n            strategies: strategies,\n        };\n        const configYamlStr = yaml.stringify(conf, yaml.defaultOptions);\n        setExportStr(configYamlStr);\n    }\n\n    const getResultsAsCSV = (results: Result[]): string => {\n        const csvRows = [`#,${ResultHeaders.join(',')}`];\n        results.forEach((result: Result, i: number) => {\n            csvRows.push([\n                i + 1,\n                `\"${result.name}\"`,\n                `\"${result.symbol}\"`,\n                `\"${result.type}\"`,\n                `\"${result.shares}\"`,\n                `\"${asCurrency(result.sharePrice)}\"`,\n                `\"${asCurrency(result.purchasePrice)}\"`,\n                `\"${asCurrency(result.allocated)}\"`,\n                `\"${asCurrency(result.remainder)}\"`,\n                `\"${asPercentage(result.symbolAllocationPercentage)}\"`,\n                `\"${asPercentage(result.groupAllocationPercentage)}\"`,\n                `\"${asCurrency(result.fromBalance)}\"`,\n            ].join(','));\n        });\n        return csvRows.join('\\n');\n    }\n\n    const [strategies, setStrategiesState] = useState([getBasicStrategy()]);\n    const [accounts, setAccountsState] = useState([getBasicAccount()]);\n    const [results, setResults] = useState([getBasicResult()]);\n    const [importStr, setImportStr] = useState('');\n    const [exportStr, setExportStr] = useState('');\n\n    // const onSymbolChange = (strategyIndex: number, symbolIndex: number, newSymbol: Symbol) => {\n    //     const newStrategies = strategies;\n    //     newStrategies[strategyIndex].symbols[symbolIndex] = newSymbol;\n    //     setStrategies(newStrategies);\n    //     console.log(newStrategies);\n    // };\n\n    // const onStrategyNameChange = (strategyIndex: number, newName: string) => {\n    //     const newStrategies = strategies;\n    //     newStrategies[strategyIndex].name = newName;\n    //     setStrategies(newStrategies);\n    //     console.log(newStrategies);\n    //     // setStrategies(strategies.map((strategy: Strategy): Strategy => {\n    //     //     if (strategy.name === strategyName) {\n    //     //         strategy.name = newName;\n    //     //         return strategy;\n    //     //     }\n    //     //     return strategy;\n    //     // }));\n    // }\n\n    // const onAddSymbol = (strategyIndex: number, newSymbol: Symbol) => {\n    //     const newStrategies = strategies;\n    //     newStrategies[strategyIndex].symbols.push(newSymbol);\n\n    //     // TODO: this is a weird workaround to force a state update\n    //     const newStrategy0 = strategies[0];\n    //     newStrategies[0] = newStrategy0;\n\n    //     setStrategies(newStrategies);\n    //     console.log(newStrategies);\n    // };\n\n    // const onDelSymbol = (strategyIndex: number, symbolIndex: number) => {\n    //     const newStrategies = strategies;\n    //     newStrategies[strategyIndex].symbols.splice(symbolIndex, 1);\n    //     setStrategies(newStrategies);\n    //     console.log(newStrategies);\n    // };\n\n    const onStrategyNameChange = (e: any, idx: number) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].name = e.target.value;\n        // leaving this here if needed\n        // newStrategies[e.target.dataset.idx].name = e.target.value;\n        setStrategies(newStrategies);\n    }\n\n    const addStrategy = () => {\n        setStrategies([...strategies, { ...getBasicStrategy() }]);\n    }\n\n    const delStrategy = (idx: number) => {\n        const newStrategies = strategies.filter((s: Strategy, i: number) => {\n            if (i !== idx) {\n                return s;\n            }\n        })\n\n        setStrategies(newStrategies);\n    }\n\n    // const getAllocations = (strategy: Strategy): Allocation => {\n    //     const allocations: Allocation[] = [getBasicAllocation()];\n    //     if (strategy.symbols.length > 0) {\n    //         strategy.symbols.forEach((symbol: Symbol) => {\n    //             allocations[symbol.type] = 1 / strategy.symbols.length;\n    //         });\n    //     }\n    //     return allocations;\n    // }\n\n    // const updateAllAllocations = (strategies: Strategy[]): Strategy[] => {\n    //     return strategies.map((strategy: Strategy) => {\n    //         // strategy.allocations = getAllocations(strategy);\n    //         return strategy;\n    //     })\n    // }\n\n    const onStrategySymbolAdd = (idx: number) => {\n        const newStrategies = strategies.map((strategy: Strategy, i: number) => {\n            // strategy.allocations = getAllocations(strategy);\n            if (idx === i) {\n                strategy.symbols.push(getBasicSymbol());\n                return strategy\n            }\n            return strategy;\n        });\n\n        setStrategies(newStrategies);\n    }\n    const onStrategySymbolDel = (idx: number, symbolIdx: number) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].symbols.splice(idx, 1);\n        // updateAllAllocations(newStrategies);\n        setStrategies(newStrategies);\n    }\n    const onStrategySymbolChange = (idx: number, symbolIdx: number, newSymbol: Symbol) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].symbols[symbolIdx] = newSymbol;\n        // updateAllAllocations(newStrategies);\n        setStrategies(newStrategies);\n    }\n\n    const onAllocationTypeChange = (idx: number, allocationIndex: number, newType: string) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].allocations[allocationIndex].type = newType;\n        setStrategies(newStrategies);\n    }\n\n    const onAllocationAmountChange = (idx: number, allocationIndex: number, newAmount: number) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].allocations[allocationIndex].amount = newAmount;\n        setStrategies(newStrategies);\n    }\n\n    const onAllocationAdd = (idx: number) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].allocations.push(getBasicAllocation());\n        setStrategies(newStrategies);\n    }\n\n    const onAllocationDel = (idx: number, allocationIndex: number) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].allocations.splice(allocationIndex, 1);\n        setStrategies(newStrategies);\n    }\n\n    const onAcctNameChange = (idx: number, newName: string) => {\n        const newAccounts = [...accounts];\n        newAccounts[idx].name = newName;\n        setAccounts(newAccounts);\n    }\n\n    const onAcctBalanceChange = (idx: number, newBalance: number) => {\n        const newAccounts = [...accounts];\n        newAccounts[idx].balance = newBalance;\n        setAccounts(newAccounts);\n    }\n\n    const onAcctStrategyChange = (idx: number, newStrategy: string) => {\n        const newAccounts = [...accounts];\n        newAccounts[idx].strategy = newStrategy;\n        setAccounts(newAccounts);\n    }\n\n    const onAcctAdd = (idx: number) => {\n        const newAccounts = [...accounts];\n        newAccounts.splice(idx, 0, getBasicAccount());\n        setAccounts(newAccounts);\n    }\n\n    const onAcctDel = (idx: number) => {\n        const newAccounts = [...accounts];\n        newAccounts.splice(idx, 1);\n        setAccounts(newAccounts);\n    }\n\n    const getStrategies = (): string[] => {\n        const strategiesObj: any = {};\n        strategies.forEach((strategy: Strategy) => {\n            strategiesObj[strategy.name] = strategy.name;\n        });\n        return Object.keys(strategiesObj);\n    }\n\n    const [importExportOpen, setImportExportOpen] = useState(false);\n    const [step1Open, setStep1Open] = useState(true);\n    const [step2Open, setStep2Open] = useState(false);\n    const [step3Open, setStep3Open] = useState(false);\n    const [tableOpen, setTableOpen] = useState(false);\n\n    return (\n        <React.Fragment>\n            <Jumbotron>\n                <h1>Invest smarter and faster!</h1>\n                <p>\n                    Use this simple tool to quickly allocate your financial accounts according to portfolios that you set up.\n                </p>\n                <p>\n                    <Button variant=\"primary\" className=\"mr-3\"\n                        aria-controls=\"import-export-opener\"\n                        aria-expanded={importExportOpen} onClick={() => {\n                            setExportStrSimple();\n                            if (!importExportOpen) {\n                                setStep1Open(false);\n                                setStep2Open(false);\n                                setStep3Open(false);\n                                setTableOpen(false);\n                            }\n                            setImportExportOpen(!importExportOpen);\n                        }}>Import/export</Button>\n                </p>\n            </Jumbotron>\n            <Container>\n                <Collapse in={importExportOpen}>\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col style={{ cursor: 'pointer' }} onClick={() => {\n                                    setImportExportOpen(!importExportOpen);\n                                }}>\n                                    <h2>\n                                        Import/export\n                                    </h2>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <p>\n                                        You can also import/export using the below options.\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Form.Group controlId=\"import-textarea\">\n                                        <Form.Label>Paste in here to Import</Form.Label>\n                                        <Form.Control as=\"textarea\" rows={6}\n                                            value={importStr}\n                                            onChange={(e: any) => {\n                                                setImportStr(e.target.value);\n                                            }} />\n                                    </Form.Group>\n                                </Col>\n                                <Col>\n                                    <Form.Group controlId=\"export-textarea\">\n                                        <Form.Label>Copy from here to Export</Form.Label>\n                                        <Form.Control as=\"textarea\" rows={6}\n                                            readOnly={true}\n                                            onChange={(e: any) => {\n                                                console.log(e.target.value);\n                                            }}\n                                            value={exportStr}\n                                        />\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Button className=\"mb-3\" onClick={() => {\n                                        const config = yaml.parse(importStr, yaml.defaultOptions);\n                                        if (config) {\n                                            setConfig(config, importStr);\n                                            setImportExportOpen(false);\n                                            setStep1Open(true);\n                                            setStep2Open(true);\n                                            setStep3Open(true);\n                                            setTableOpen(false);\n                                        }\n                                    }}>\n                                        Import\n                                    </Button>\n                                </Col>\n                                <Col>\n                                    {/* <Button className=\"mb-3 mr-3\" onClick={() => {\n                                        setExportStrSimple();\n                                    }}>\n                                        Export\n                                    </Button> */}\n                                    <Button className=\"mb-3\" onClick={() => {\n                                        navigator.clipboard.writeText(exportStr);\n                                        setImportExportOpen(false);\n                                        setStep1Open(true);\n                                        setStep2Open(true);\n                                        setStep3Open(true);\n                                    }}>\n                                        Copy to Clipboard\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Collapse>\n                <Row>\n                    <Col style={{ cursor: 'pointer' }} onClick={() => {\n                        setStep1Open(!step1Open);\n                    }}>\n                        <h2>\n                            Step 1. Create a Strategy\n                        </h2>\n                    </Col>\n                </Row>\n                <Collapse in={step1Open}>\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <p>\n                                        An investment strategy can be the same across different accounts. For example, you might have a 401k, HSA, and Roth IRA all with long-term growth as the goal, with the <b>same exact investments</b>, but just across different accounts. This is one specific investment <i>strategy</i>.\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    {\n                                        strategies.map((_strategy: Strategy, j: number): JSX.Element => {\n                                            return (\n                                                <StrategyView\n                                                    key={`strategyview-${j}`}\n                                                    idx={j}\n                                                    strategies={strategies}\n                                                    onStrategyNameChange={onStrategyNameChange}\n                                                    onStrategyAdd={addStrategy}\n                                                    onStrategyDel={delStrategy}\n                                                    onStrategySymbolAdd={onStrategySymbolAdd}\n                                                    onStrategySymbolDel={onStrategySymbolDel}\n                                                    onStrategySymbolChange={onStrategySymbolChange}\n                                                    onAllocationTypeChange={onAllocationTypeChange}\n                                                    onAllocationAmountChange={onAllocationAmountChange}\n                                                    onAllocationAdd={onAllocationAdd}\n                                                    onAllocationDel={onAllocationDel}\n                                                ></StrategyView>\n                                            )\n                                        })\n                                    }\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Button className=\"mb-3\"\n                                        onClick={() => {\n                                            setStep1Open(false)\n                                            setStep2Open(!step2Open)\n                                            setStep3Open(false)\n                                        }}>\n                                        Next step\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Collapse>\n                <Row>\n                    <Col style={{ cursor: 'pointer' }} onClick={() => {\n                        setStep2Open(!step2Open);\n                    }}>\n                        <h2>\n                            Step 2. Set up Accounts\n                        </h2>\n                    </Col>\n                </Row>\n                <Collapse in={step2Open}>\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <p>\n                                        Next, you can create any number of accounts that you want, each with its own balance. Then, you can choose a strategy from above to assign to it.\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    {\n                                        accounts.map((_account: Account, idx: number) => {\n                                            return (\n                                                <AccountView\n                                                    key={`accountview-${idx}`}\n                                                    accounts={accounts}\n                                                    idx={idx}\n                                                    onAcctNameChange={onAcctNameChange}\n                                                    onAcctBalanceChange={onAcctBalanceChange}\n                                                    onAcctStrategyChange={onAcctStrategyChange}\n                                                    onAcctAdd={onAcctAdd}\n                                                    onAcctDel={onAcctDel}\n                                                    getStrategies={getStrategies}\n                                                />\n                                            )\n                                        })\n                                    }\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Button className=\"mb-3\"\n                                        onClick={() => {\n                                            setStep1Open(false)\n                                            setStep2Open(false)\n                                            setStep3Open(true)\n                                        }}>\n                                        Final step\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Collapse>\n                <Row>\n                    <Col style={{ cursor: 'pointer' }} onClick={() => {\n                        setStep3Open(!step3Open);\n                    }}>\n                        <h2>\n                            Step 3. Get results\n                        </h2>\n                    </Col>\n                </Row>\n                <Collapse in={step3Open}>\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <p>\n                                        Just click the \"Balance\" button to query the Yahoo Finance servers to get quotes for each symbol from above. A table below will populate, and you can copy the results as CSV, so that they can be pasted into your favorite spreadsheet processor.\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Button className=\"mb-3\" onClick={() => {\n                                        let balancedResults: Result[] = [];\n                                        // todo: refactor\n                                        const allSymbols: any = {};\n                                        strategies.forEach((strategy: Strategy) => {\n                                            strategy.symbols.forEach((symbol: Symbol) => {\n                                                allSymbols[symbol.symbol] = symbol.symbol;\n                                            });\n                                        });\n                                        GetQuotes(Object.keys(allSymbols)).then((quotes) => {\n                                            if (Array.isArray(quotes)) {\n                                                accounts.forEach((account: Account) => {\n                                                    strategies.forEach((strategy: Strategy) => {\n                                                        if (strategy.name.toLowerCase() === account.strategy.toLowerCase()) {\n                                                            // const r = BalanceAccount(account, strategy, [{ price: 50.0 }]); // for testing\n                                                            const r = BalanceAccount(account, strategy, quotes);\n                                                            console.log(r);\n                                                            balancedResults = [...balancedResults, ...r];\n                                                        }\n                                                    })\n                                                })\n                                                console.log(balancedResults);\n                                                setResults([...balancedResults]);\n                                                setTableOpen(true);\n                                                return;\n                                            }\n                                            console.error(`did not receive quotes from backend: ${JSON.stringify(quotes)}`);\n                                        });\n                                    }}>\n                                        Balance\n                                    </Button>\n\n                                </Col>\n                            </Row>\n                            <Collapse in={tableOpen}>\n                                <Row>\n                                    <Col>\n                                        <Row>\n                                            <Col className=\"mb-3\">\n                                                {/* <ResultsView results={results} /> */}\n                                                <Table striped bordered hover responsive>\n                                                    <thead>\n                                                        <tr>\n                                                            <th>#</th>\n                                                            {\n                                                                ResultHeaders.map((header: string, i: number): JSX.Element => {\n                                                                    return (\n                                                                        <td key={`results-header-${i}`}>{header}</td>\n                                                                    )\n                                                                })\n                                                            }\n                                                        </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                        {\n                                                            results.map((result: Result, i: number): JSX.Element => {\n                                                                return (\n                                                                    <tr key={`results-row-${i}`}>\n                                                                        <td>{i + 1}</td>\n                                                                        <td>{result.name}</td>\n                                                                        <td>{result.symbol}</td>\n                                                                        <td>{result.type}</td>\n                                                                        <td>{result.shares}</td>\n                                                                        <td>{asCurrency(result.sharePrice)}</td>\n                                                                        <td>{asCurrency(result.purchasePrice)}</td>\n                                                                        <td>{asCurrency(result.allocated)}</td>\n                                                                        <td>{asCurrency(result.remainder)}</td>\n                                                                        <td>{asPercentage(result.symbolAllocationPercentage)}</td>\n                                                                        <td>{asPercentage(result.groupAllocationPercentage)}</td>\n                                                                        <td>{asCurrency(result.fromBalance)}</td>\n                                                                    </tr>\n                                                                )\n                                                            })\n                                                        }\n                                                    </tbody>\n                                                </Table>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col>\n                                                <Button className=\"mb-3 mr-3\" onClick={() => {\n                                                    navigator.clipboard.writeText(getResultsAsCSV(results));\n                                                }}>\n                                                    Copy as CSV\n                                                </Button>\n                                                <Button className=\"mb-3 mr-3\" onClick={() => {\n                                                    setStep1Open(true)\n                                                    setStep2Open(false)\n                                                    setStep3Open(false)\n                                                }}>\n                                                    Back to top\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                </Row>\n                            </Collapse>\n                        </Col>\n                    </Row>\n                </Collapse>\n            </Container>\n        </React.Fragment>\n\n    );\n}\n\nexport default InvestmentsView;\n","import axios from 'axios';\n\n\nconst TransformQuote = (quote: RawQuote): Quote => {\n    const tQuote: Quote = {\n        rawQuote: quote,\n        price: 0.0,\n        change: 0.0,\n        changePercent: 0.0,\n        isActive: false,\n        isRegularTradingSession: false,\n    };\n\n    if (quote.marketState === \"REGULAR\") {\n        tQuote.price = quote.regularMarketPrice;\n        tQuote.change = quote.regularMarketChange;\n        tQuote.changePercent = quote.regularMarketChangePercent;\n        tQuote.isActive = true;\n        tQuote.isRegularTradingSession = true;\n        return tQuote;\n    }\n\n    if (quote.marketState === \"POST\" && quote.postMarketPrice === 0.0) {\n        tQuote.rawQuote = quote;\n        tQuote.price = quote.regularMarketPrice;\n        tQuote.change = quote.regularMarketChange;\n        tQuote.changePercent = quote.regularMarketChangePercent;\n        tQuote.isActive = true;\n        tQuote.isRegularTradingSession = false;\n        return tQuote;\n    }\n\n    if (quote.marketState === \"PRE\" && quote.preMarketPrice === 0.0) {\n        tQuote.rawQuote = quote;\n        tQuote.price = quote.regularMarketPrice;\n        tQuote.change = quote.regularMarketChange;\n        tQuote.changePercent = quote.regularMarketChangePercent;\n        tQuote.isActive = false;\n        tQuote.isRegularTradingSession = false;\n        return tQuote;\n    }\n\n    if (quote.marketState === \"POST\") {\n        tQuote.rawQuote = quote;\n        tQuote.price = quote.postMarketPrice;\n        tQuote.change = quote.postMarketChange + quote.regularMarketChange;\n        tQuote.changePercent = quote.postMarketChangePercent + quote.regularMarketChangePercent;\n        tQuote.isActive = true;\n        tQuote.isRegularTradingSession = false;\n        return tQuote;\n    }\n\n    if (quote.marketState === \"PRE\") {\n        tQuote.rawQuote = quote;\n        tQuote.price = quote.preMarketPrice;\n        tQuote.change = quote.preMarketChange;\n        tQuote.changePercent = quote.preMarketChangePercent;\n        tQuote.isActive = true;\n        tQuote.isRegularTradingSession = false;\n        return tQuote;\n    }\n\n    if (quote.postMarketPrice !== 0.0) {\n        tQuote.rawQuote = quote;\n        tQuote.price = quote.postMarketPrice;\n        tQuote.change = quote.postMarketChange + quote.regularMarketChange;\n        tQuote.changePercent = quote.postMarketChangePercent + quote.regularMarketChangePercent;\n        tQuote.isActive = false;\n        tQuote.isRegularTradingSession = false;\n        return tQuote;\n    }\n\n    tQuote.rawQuote = quote;\n    tQuote.price = quote.regularMarketPrice;\n    tQuote.change = quote.regularMarketChange;\n    tQuote.changePercent = quote.regularMarketChangePercent;\n    tQuote.isActive = false;\n    tQuote.isRegularTradingSession = false;\n    return tQuote;\n}\n\nexport const GetQuotes = (symbols: string[]): Promise<Quote[] | never[] | undefined> => {\n    const url = `https://query1.finance.yahoo.com/v7/finance/quote?lang=en-US&region=US&corsDomain=finance.yahoo.com&symbols=${symbols.join(',')}`;\n\n    // const myRequest = new Request(url, {\n    //     method: 'GET',\n    //     mode: 'no-cors',\n    // });\n\n    // fetch(myRequest).then(function (response) {\n    //     return response;\n    // }).then(function (response) {\n    //     console.log(response);\n    // }).catch(function (e) {\n    //     console.log(e);\n    // });\n\n    return axios.get(url).then(res => {\n        const response: APIResponse = res.data;\n        if (response.quoteResponse.result) {\n            const results: Quote[] = [];\n            response.quoteResponse.result.forEach((rq: RawQuote) => {\n                results.push(TransformQuote(rq));\n            })\n            return results;\n        }\n    }).catch(err => {\n        console.error(err);\n        return [];\n    })\n}\n\nexport interface Quote {\n    rawQuote: RawQuote;\n    price: number;\n    change: number;\n    changePercent: number;\n    isActive: boolean;\n    isRegularTradingSession: boolean;\n}\n\n// http://www.json2ts.com/#\nexport interface RawQuote {\n    language: string;\n    region: string;\n    quoteType: string;\n    quoteSourceName: string;\n    triggerable: boolean;\n    currency: string;\n    marketState: string;\n    messageBoardId: string;\n    exchangeTimezoneName: string;\n    exchangeTimezoneShortName: string;\n    gmtOffSetMilliseconds: number;\n    market: string;\n    esgPopulated: boolean;\n    tradeable: boolean;\n    exchange: string;\n    shortName: string;\n    longName: string;\n    firstTradeDateMilliseconds: any;\n    priceHint: number;\n\n    // may or may not be present depending on when the API is hit\n    exchangeName: string;\n    exchangeDelay: number;\n    preMarketChange: number;\n    preMarketChangePercent: number;\n    preMarketPrice: number;\n\n    postMarketChangePercent: number;\n    postMarketTime: number;\n    postMarketPrice: number;\n    postMarketChange: number;\n    regularMarketChange: number;\n    regularMarketChangePercent: number;\n    regularMarketTime: number;\n    regularMarketPrice: number;\n    regularMarketDayHigh: number;\n    regularMarketDayRange: string;\n    regularMarketDayLow: number;\n    regularMarketVolume: number;\n    regularMarketPreviousClose: number;\n    bid: number;\n    ask: number;\n    bidSize: number;\n    askSize: number;\n    fullExchangeName: string;\n    financialCurrency: string;\n    regularMarketOpen: number;\n    averageDailyVolume3Month: number;\n    averageDailyVolume10Day: number;\n    fiftyTwoWeekLowChange: number;\n    fiftyTwoWeekLowChangePercent: number;\n    fiftyTwoWeekRange: string;\n    fiftyTwoWeekHighChange: number;\n    fiftyTwoWeekHighChangePercent: number;\n    fiftyTwoWeekLow: number;\n    fiftyTwoWeekHigh: number;\n    earningsTimestamp: number;\n    earningsTimestampStart: number;\n    earningsTimestampEnd: number;\n    trailingPE: number;\n    epsTrailingTwelveMonths: number;\n    epsForward: number;\n    epsCurrentYear: number;\n    priceEpsCurrentYear: number;\n    sharesOutstanding: number;\n    bookValue: number;\n    fiftyDayAverage: number;\n    fiftyDayAverageChange: number;\n    fiftyDayAverageChangePercent: number;\n    twoHundredDayAverage: number;\n    twoHundredDayAverageChange: number;\n    twoHundredDayAverageChangePercent: number;\n    marketCap: any;\n    forwardPE: number;\n    priceToBook: number;\n    sourceInterval: number;\n    exchangeDataDelayedBy: number;\n    displayName: string;\n    symbol: string;\n    dividendDate?: number;\n    trailingAnnualDividendRate?: number;\n    trailingAnnualDividendYield?: number;\n    [key: string]: any; // allows for values we haven't specified above\n}\n\nexport interface QuoteResponse {\n    result: RawQuote[];\n    error?: any;\n}\n\nexport interface APIResponse {\n    quoteResponse: QuoteResponse;\n}\n","import React from 'react';\nimport './App.css';\nimport Container from 'react-bootstrap/Container';\nimport JumboView from './main/jumboview';\nimport InvestmentsView from './main/investments';\n\nconst App = function () {\n  return (\n    <Container fluid>\n      {/* <JumboView\n        header='Invest Smarter!'\n        body='Use this simple tool to quickly allocate your financial accounts according to portfolios that you set up.'\n      ></JumboView> */}\n      <InvestmentsView></InvestmentsView>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}