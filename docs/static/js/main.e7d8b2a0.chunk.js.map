{"version":3,"sources":["main/models.tsx","main/account.tsx","main/strategy.tsx","main/balancer.tsx","main/quote.tsx","main/helpers.tsx","main/investments.tsx","main/example.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultHeaders","AccountView","props","accounts","idx","onAcctNameChange","onAcctBalanceChange","onAcctStrategyChange","onAcctAdd","onAcctDel","getStrategies","className","Form","Row","Col","sm","InputGroup","Prepend","Text","Control","type","placeholder","data-idx","id","value","name","onChange","e","target","data-balance","balance","onBlur","toLocaleString","style","currency","balanceAsNumbers","replace","console","log","newAmount","Number","parseFloat","isNaN","as","strategy","map","i","ButtonGroup","aria-label","Button","onClick","variant","disabled","length","StrategyView","strategies","onStrategyNameChange","onStrategyDel","onStrategyAdd","onStrategySymbolAdd","onStrategySymbolDel","onStrategySymbolChange","onAllocationTypeChange","onAllocationAmountChange","onAllocationAdd","onAllocationDel","Fragment","htmlFor","Append","symbols","symbol","data-symbol-idx","newSymbol","toUpperCase","allocations","allocation","xs","amount","BalanceAccount","account","quotes","results","groups","forEach","Object","keys","group","groupAllocation","allocationType","filter","warn","getAllocation","groupAllocationAmount","allocPercentageFromTotal","allocPerSymbol","j","quote","k","rawQuote","shares","Math","floor","price","totalAllocated","sharePrice","remainder","idealAllocation","idealGroupAllocationPercentage","idealSymbolAllocationPercentage","newResult","purchasePrice","allocated","symbolAllocationPercentage","groupAllocationPercentage","fromBalance","push","TransformQuote","tQuote","change","changePercent","isActive","isRegularTradingSession","marketState","regularMarketPrice","regularMarketChange","regularMarketChangePercent","postMarketPrice","preMarketPrice","postMarketChange","postMarketChangePercent","preMarketChange","preMarketChangePercent","asCurrency","asPercentage","toFixed","InvestmentsView","getBasicStrategy","getBasicAllocation","getConfig","accts","strats","setStrategies","newStrategies","setStrategiesState","newStrategiesYaml","yaml","setExportStr","setAccounts","newAccounts","setAccountsState","setConfig","config","configYamlStr","useState","setResults","importStr","setImportStr","exportStr","useYahooDirect","setUseYahooDirect","addStrategy","delStrategy","s","symbolIdx","splice","allocationIndex","newType","newName","newBalance","newStrategy","strategiesObj","importExportOpen","setImportExportOpen","step1Open","setStep1Open","step2Open","setStep2Open","step3Open","setStep3Open","tableOpen","setTableOpen","Container","fluid","paddingLeft","paddingRight","Jumbotron","href","rel","aria-controls","aria-expanded","conf","setExportStrSimple","Collapse","in","cursor","Group","controlId","Label","rows","readOnly","navigator","clipboard","writeText","_strategy","_account","balancedResults","allSymbols","url","join","axios","get","then","res","response","data","quoteResponse","result","rq","catch","err","error","GetQuotes","Array","isArray","toLowerCase","r","JSON","stringify","Table","striped","bordered","hover","responsive","header","csvRows","getResultsAsCSV","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RA4CaA,EAAgB,CACzB,OACA,SACA,OACA,SACA,cACA,iBACA,YACA,YACA,sBACA,qBACA,gB,uBCnCSC,EAAc,SAAUC,GAA0B,IAEvDC,EAQAD,EARAC,SACAC,EAOAF,EAPAE,IACAC,EAMAH,EANAG,iBACAC,EAKAJ,EALAI,oBACAC,EAIAL,EAJAK,qBACAC,EAGAN,EAHAM,UACAC,EAEAP,EAFAO,UACAC,EACAR,EADAQ,cAGJ,OACI,qBAAKC,UAAU,OAAf,SACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,eAACC,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACI,cAACK,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,qBAIJ,cAACN,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLC,YAAY,OACZC,WAAUlB,EACVmB,GAAE,mBAAcnB,EAAd,SACFoB,MAAOrB,EAASC,GAAKqB,KACrBC,SAAU,SAACC,GACPtB,EAAiBD,EAAKuB,EAAEC,OAAOJ,eAI/C,cAACV,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,eAACC,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACI,cAACK,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,wBAIJ,cAACN,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLC,YAAY,OACZC,WAAUlB,EACVyB,eAAc1B,EAASC,GAAK0B,QAC5BP,GAAE,mBAAcnB,EAAd,YACFoB,MAAOrB,EAASC,GAAK0B,QACrBC,OAAQ,SAACJ,GACLA,EAAEC,OAAOJ,MAAQrB,EAASC,GAAK0B,QAAQE,eAAe,QAAS,CAAEC,MAAO,WAAYC,SAAU,SAElGR,SAAU,SAACC,GACP,IAAMQ,EAAmBR,EAAEC,OAAOJ,MAAMY,QAAQ,aAAc,IAE9D,GADAC,QAAQC,IAAIH,GACa,KAArBA,EAAJ,CAIA,IAAMI,EAAYC,OAAOC,WAAWN,GAChCK,OAAOE,MAAMH,IAGjBjC,EAAoBF,EAAKmC,QAPrBjC,EAAoBF,EAAK,WAW7C,cAACU,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,eAACC,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACI,cAACK,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,yBAIJ,cAACN,EAAA,EAAKO,QAAN,CAAcwB,GAAG,SACbpB,GAAE,mBAAcnB,EAAd,aACFoB,MAAOrB,EAASC,GAAKwC,SACrBlB,SAAU,SAACC,GACPpB,EAAqBH,EAAKuB,EAAEC,OAAOJ,QAJ3C,SAOQd,IAAgBmC,KAAI,SAACD,EAAkBE,GACnC,OACI,iCAAqDF,GAArD,kBAAwBxC,EAAxB,4BAA+C0C,cAgBvE,cAAChC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,eAACgC,EAAA,EAAD,CAAaC,aAAA,kCAAuC5C,GAApD,UACI,cAAC6C,EAAA,EAAD,CACIC,QAAS,WACL1C,EAAUJ,IAFlB,eAMA,cAAC6C,EAAA,EAAD,CAAQE,QAAQ,SACZC,SAAUjD,EAASkD,QAAU,EAC7BH,QAAS,WACLzC,EAAUL,IAHlB,4BCgJbkD,EAvPM,SAAUpD,GAA2B,IAElDE,EAYAF,EAZAE,IACAmD,EAWArD,EAXAqD,WACAC,EAUAtD,EAVAsD,qBAEAC,GAQAvD,EATAwD,cASAxD,EARAuD,eACAE,EAOAzD,EAPAyD,oBACAC,EAMA1D,EANA0D,oBACAC,EAKA3D,EALA2D,uBACAC,EAIA5D,EAJA4D,uBACAC,EAGA7D,EAHA6D,yBACAC,EAEA9D,EAFA8D,gBACAC,EACA/D,EADA+D,gBAGJ,OACI,eAAC,IAAMC,SAAP,WACI,cAACrD,EAAA,EAAD,CAAKF,UAAU,kBAAf,SACI,eAACG,EAAA,EAAD,WACI,uBAAOqD,QAAO,wBAAmB/D,GAAjC,2BACA,eAACY,EAAA,EAAD,CAAYL,UAAU,OAAtB,UAMI,cAACC,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLC,YAAY,OACZC,WAAUlB,EACVqB,KAAI,wBAAmBrB,GACvBmB,GAAE,wBAAmBnB,GACrBoB,MAAO+B,EAAWnD,GAAKqB,KACvBC,SAAU,SAACC,GACP6B,EAAqB7B,EAAGvB,MAGhC,cAACY,EAAA,EAAWoD,OAAZ,UACI,cAACnB,EAAA,EAAD,CACItC,UAAU,GACVwC,QAAQ,iBACRC,SAAUG,EAAWF,QAAU,EAC/BH,QAAS,WACLO,EAAcrD,IALtB,yBAyBhB,eAACS,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,IACT,cAACD,EAAA,EAAD,CAAKC,GAAI,GAAT,SACI,mBAAGJ,UAAU,aAAb,SACI,8BAAG,wCAAH,2FAIZ,cAACE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UAEQyC,EAAWnD,GAAKiE,QAAQxB,KAAI,SAACyB,EAAgBxB,GACzC,OACI,eAACjC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,IACT,cAACD,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,eAACC,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACI,cAACK,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,uBAIJ,cAACN,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLC,YAAY,OACZC,WAAUlB,EACVmE,kBAAiBzB,EACjBvB,GAAE,mBAAcnB,EAAd,oBAA6B0C,EAA7B,WACFtB,MAAO+B,EAAWnD,GAAKiE,QAAQvB,GAAGwB,OAClC5C,SAAU,SAACC,GACP,IAAM6C,EAAYjB,EAAWnD,GAAKiE,QAAQvB,GAC1C0B,EAAUF,OAAS3C,EAAEC,OAAOJ,MAAMiD,cAClCZ,EAAuBzD,EAAK0C,EAAG0B,WAI/C,cAAC1D,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,eAACC,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACI,cAACK,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,qBAIJ,cAACN,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLC,YAAY,QACZC,WAAUlB,EACVmE,kBAAiBzB,EACjBvB,GAAE,mBAAcnB,EAAd,oBAA6B0C,EAA7B,SACFtB,MAAO+B,EAAWnD,GAAKiE,QAAQvB,GAAG1B,KAClCM,SAAU,SAACC,GACP,IAAM6C,EAAYjB,EAAWnD,GAAKiE,QAAQvB,GAC1C0B,EAAUpD,KAAOO,EAAEC,OAAOJ,MAC1BqC,EAAuBzD,EAAK0C,EAAG0B,MAEvC,eAACxD,EAAA,EAAWoD,OAAZ,WACI,cAACnB,EAAA,EAAD,CACItC,UAAU,GACVwC,QAAQ,oBACRD,QAAS,WACLS,EAAoBvD,IAJ5B,eAQA,cAAC6C,EAAA,EAAD,CACItC,UAAU,GACVwC,QAAQ,oBACRC,SAAUG,EAAWnD,GAAKiE,QAAQhB,QAAU,EAC5CH,QAAS,WACLU,EAAoBxD,EAAK0C,IALjC,yBAnDhB,mBAAsB1C,EAAtB,oBAAqC0C,EAArC,gBAiFpB,eAACjC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,IACT,cAACD,EAAA,EAAD,CAAKC,GAAI,GAAT,SACI,mBAAGJ,UAAU,aAAb,SACI,8BAAG,4CAAH,0EAIZ,cAACE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UAEQyC,EAAWnD,GAAKsE,YAAY7B,KAAI,SAAC8B,EAAwB7B,GACrD,OACI,eAACjC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAG6D,GAAI,IAChB,cAAC9D,EAAA,EAAD,CAAK8D,GAAI,EAAG7D,GAAI,EAAhB,SACI,eAACC,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACI,cAACK,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,qBAIJ,cAACN,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLC,YAAY,QACZC,WAAUlB,EACVmE,kBAAiBzB,EACjBvB,GAAE,mBAAcnB,EAAd,wBAAiC0C,EAAjC,SACFtB,MAAO+B,EAAWnD,GAAKsE,YAAY5B,GAAG1B,KACtCM,SAAU,SAACC,GACPmC,EAAuB1D,EAAK0C,EAAGnB,EAAEC,OAAOJ,eAIxD,cAACV,EAAA,EAAD,CAAK8D,GAAI,EAAG7D,GAAI,EAAhB,SACI,eAACC,EAAA,EAAD,CAAYL,UAAU,OAAtB,UAMI,cAACC,EAAA,EAAKO,QAAN,CACIC,KAAK,SACLC,YAAY,QACZC,WAAUlB,EACVmE,kBAAiBzB,EACjBvB,GAAE,mBAAcnB,EAAd,wBAAiC0C,EAAjC,WACFtB,MAAO+B,EAAWnD,GAAKsE,YAAY5B,GAAG+B,OACtCnD,SAAU,SAACC,GACP,IAAIY,EAAYC,OAAOC,WAAWd,EAAEC,OAAOJ,OACvCgB,OAAOE,MAAMH,KACbA,EAAY,GAEhBwB,EAAyB3D,EAAK0C,EAAGP,MAEzC,eAACvB,EAAA,EAAWoD,OAAZ,WACI,cAACpD,EAAA,EAAWE,KAAZ,gBAGA,cAAC+B,EAAA,EAAD,CACItC,UAAU,GACVwC,QAAQ,oBACRD,QAAS,WACLc,EAAgB5D,IAJxB,eAQA,cAAC6C,EAAA,EAAD,CACItC,UAAU,GACVwC,QAAQ,oBACRC,SAAUG,EAAWnD,GAAKsE,YAAYrB,QAAU,EAChDH,QAAS,WACLe,EAAgB7D,EAAK0C,IAL7B,yBAtDhB,mBAAsB1C,EAAtB,wBAAyC0C,EAAzC,kBA1JxB,mBAAiC1C,KCR5B0E,EAAiB,SAACC,EAAkBnC,EAAoBoC,GAGjE,IAAMC,EAAoB,GACpBC,EAAc,GAgEpB,OA/DAtC,EAASyB,QAAQc,SAAQ,SAACb,EAAgBxB,GACjCoC,EAAOZ,EAAOlD,QACf8D,EAAOZ,EAAOlD,MAAQ,IAE1B8D,EAAOZ,EAAOlD,MAAMkD,EAAOA,QAAU,MAGzCjC,QAAQC,IAAI4C,GAGZE,OAAOC,KAAKH,GAAQC,SAAQ,SAACG,EAAexC,GAGxC,IAAMyC,EAjCQ,SAAC3C,EAAoB4C,GACvC,IAAMP,EAAUrC,EAAS8B,YAAYe,QAAO,SAACd,EAAwB7B,GACjE,GAAI6B,EAAWvD,OAASoE,EAEpB,OADAnD,QAAQC,IAAIqC,GACLA,KAIf,OAAuB,IAAnBM,EAAQ5B,OACD4B,EAAQ,IAEnB5C,QAAQqD,KAAK,kEACN,CAAEtE,KAAM,GAAIyD,OAAQ,IAqBCc,CAAc/C,EAAU0C,GAChD,GAAIC,EAAgBnE,KAAM,CAGtB,IAAMwE,EAAyBL,EAAgBV,OAAS,IAASE,EAAQjD,QAInE+D,EAA2BN,EAAgBV,OAAUO,OAAOC,KAAKH,EAAOI,IAAQjC,OAIhFyC,EAAiBF,EAAyBR,OAAOC,KAAKH,EAAOI,IAAQjC,OAE3EhB,QAAQC,IAAIsD,EAAuBC,EAA0BC,GAC7DV,OAAOC,KAAKH,EAAOI,IAAQH,SAAQ,SAACb,EAAgByB,GAChDf,EAAOG,SAAQ,SAACa,EAAcC,GAC1B,GAAID,EAAME,SAAS5B,SAAWA,EAAQ,CAClC,IAAM6B,EAASC,KAAKC,MAAMP,EAAiBE,EAAMM,OAC3CC,EAAiBJ,EAASH,EAAMM,MACtCpB,EAAOI,GAAOhB,GAAU,CACpB6B,OAAQA,EACRK,WAAYR,EAAMM,MAClBG,UAAWX,EAAiBS,EAC5BA,eAAgBA,EAChBG,gBAAiBZ,EACjBa,+BAAgCpB,EAAgBV,OAChD+B,gCAAiCf,GAErC,IAAMgB,EAAY,CACdpF,KAAMsD,EAAQtD,KACd6C,OAAQA,EACRlD,KAAMkE,EACNa,OAAQA,EACRK,WAAYR,EAAMM,MAClBQ,cAAeP,EACfQ,UAAWjB,EACXW,UAAWvB,EAAOI,GAAOhB,GAAQmC,UACjCO,2BAA4B9B,EAAOI,GAAOhB,GAAQsC,gCAClDK,0BAA2B/B,EAAOI,GAAOhB,GAAQqC,+BACjDO,YAAanC,EAAQjD,SAEzBO,QAAQC,IAAIuE,GACZ5B,EAAQkC,KAAKN,UAIzBxE,QAAQC,IAAI4C,OAGbD,G,iBClGLmC,EAAiB,SAACpB,GACpB,IAAMqB,EAAgB,CAClBnB,SAAUF,EACVM,MAAO,EACPgB,OAAQ,EACRC,cAAe,EACfC,UAAU,EACVC,yBAAyB,GAG7B,MAA0B,YAAtBzB,EAAM0B,aACNL,EAAOf,MAAQN,EAAM2B,mBACrBN,EAAOC,OAAStB,EAAM4B,oBACtBP,EAAOE,cAAgBvB,EAAM6B,2BAC7BR,EAAOG,UAAW,EAClBH,EAAOI,yBAA0B,EAC1BJ,GAGe,SAAtBrB,EAAM0B,aAAoD,IAA1B1B,EAAM8B,iBACtCT,EAAOnB,SAAWF,EAClBqB,EAAOf,MAAQN,EAAM2B,mBACrBN,EAAOC,OAAStB,EAAM4B,oBACtBP,EAAOE,cAAgBvB,EAAM6B,2BAC7BR,EAAOG,UAAW,EAClBH,EAAOI,yBAA0B,EAC1BJ,GAGe,QAAtBrB,EAAM0B,aAAkD,IAAzB1B,EAAM+B,gBACrCV,EAAOnB,SAAWF,EAClBqB,EAAOf,MAAQN,EAAM2B,mBACrBN,EAAOC,OAAStB,EAAM4B,oBACtBP,EAAOE,cAAgBvB,EAAM6B,2BAC7BR,EAAOG,UAAW,EAClBH,EAAOI,yBAA0B,EAC1BJ,GAGe,SAAtBrB,EAAM0B,aACNL,EAAOnB,SAAWF,EAClBqB,EAAOf,MAAQN,EAAM8B,gBACrBT,EAAOC,OAAStB,EAAMgC,iBAAmBhC,EAAM4B,oBAC/CP,EAAOE,cAAgBvB,EAAMiC,wBAA0BjC,EAAM6B,2BAC7DR,EAAOG,UAAW,EAClBH,EAAOI,yBAA0B,EAC1BJ,GAGe,QAAtBrB,EAAM0B,aACNL,EAAOnB,SAAWF,EAClBqB,EAAOf,MAAQN,EAAM+B,eACrBV,EAAOC,OAAStB,EAAMkC,gBACtBb,EAAOE,cAAgBvB,EAAMmC,uBAC7Bd,EAAOG,UAAW,EAClBH,EAAOI,yBAA0B,EAC1BJ,GAGmB,IAA1BrB,EAAM8B,iBACNT,EAAOnB,SAAWF,EAClBqB,EAAOf,MAAQN,EAAM8B,gBACrBT,EAAOC,OAAStB,EAAMgC,iBAAmBhC,EAAM4B,oBAC/CP,EAAOE,cAAgBvB,EAAMiC,wBAA0BjC,EAAM6B,2BAC7DR,EAAOG,UAAW,EAClBH,EAAOI,yBAA0B,EAC1BJ,IAGXA,EAAOnB,SAAWF,EAClBqB,EAAOf,MAAQN,EAAM2B,mBACrBN,EAAOC,OAAStB,EAAM4B,oBACtBP,EAAOE,cAAgBvB,EAAM6B,2BAC7BR,EAAOG,UAAW,EAClBH,EAAOI,yBAA0B,EAC1BJ,I,gBC7EEe,EAAa,SAACvD,GACvB,OAAOA,EAAO7C,eAAe,QAAS,CAAEC,MAAO,WAAYC,SAAU,SAE5DmG,EAAe,SAACxD,GACzB,MAAM,GAAN,OAAUA,EAAOyD,QAAQ,GAAzB,MCioBWC,EAjnBS,WACpB,IAOMC,EAAmB,WACrB,MAAO,CACH/G,KAAK,uBACL4C,QAAS,CATN,CACHC,OAAQ,OACRlD,KAAM,UAQNsD,YAAa,CAAC+D,OAYhBA,EAAqB,WACvB,MAAO,CACHrH,KAAM,QACNyD,OAAQ,MAoBV6D,EAAY,SAACC,EAAkBC,GAMjC,MALqB,CACjBzI,SAAUwI,EACVpF,WAAYqF,IAMdC,EAAgB,SAACC,GACnBC,EAAmBD,GACnB,IAAME,EAAoBC,YAAeP,EAAUvI,EAAU2I,GAAgBG,kBAC7EC,EAAaF,IAGXG,EAAc,SAACC,GACjBC,EAAiBD,GACjB,IAAMJ,EAAoBC,YAAeP,EAAUU,EAAa7F,GAAa0F,kBAC7EC,EAAaF,IAGXM,EAAY,SAACC,EAAgBC,GAC/BT,EAAmBQ,EAAOhG,YAC1B8F,EAAiBE,EAAOpJ,UACpBqJ,GACAN,EAAaM,IAxEK,EA0GeC,mBAAS,CAACjB,MA1GzB,mBA0GnBjF,EA1GmB,KA0GPwF,EA1GO,OA2GWU,mBAAS,CA1FnC,CACHhI,KAAM,OACNK,QAAS,IACTc,SAAS,0BApBS,mBA2GnBzC,EA3GmB,KA2GTkJ,EA3GS,OA4GII,mBAAS,CA5E5B,CACHhI,KAAM,wBACN6C,OAAQ,OACRlD,KAAM,QACN+E,OAAQ,EACRK,WAAY,EACZM,cAAe,EACfC,UAAW,EACXN,UAAW,EACXO,2BAA4B,EAC5BC,0BAA2B,EAC3BC,YAAa,KA3CK,mBA4GnBjC,EA5GmB,KA4GVyE,EA5GU,OA6GQD,mBAAS,IA7GjB,mBA6GnBE,EA7GmB,KA6GRC,EA7GQ,OA8GQH,mBAAS,IA9GjB,mBA8GnBI,EA9GmB,KA8GRX,EA9GQ,OA+GkBO,oBAAS,GA/G3B,mBA+GnBK,EA/GmB,KA+GHC,EA/GG,KAiHpBvG,EAAuB,SAAC7B,EAAQvB,GAClC,IAAM0I,EAAa,YAAOvF,GAC1BuF,EAAc1I,GAAKqB,KAAOE,EAAEC,OAAOJ,MAGnCqH,EAAcC,IAGZkB,EAAc,WAChBnB,EAAc,GAAD,mBAAKtF,GAAL,gBAAsBiF,SAGjCyB,GAAc,SAAC7J,GACjB,IAAM0I,EAAgBvF,EAAWkC,QAAO,SAACyE,EAAapH,GAClD,GAAIA,IAAM1C,EACN,OAAO8J,KAIfrB,EAAcC,IAGZnF,GAAsB,SAACvD,GACzB,IAAM0I,EAAgBvF,EAAWV,KAAI,SAACD,EAAoBE,GAEtD,OAAI1C,IAAQ0C,GACRF,EAASyB,QAAQ8C,KAzIlB,CACH7C,OAAQ,OACRlD,KAAM,UAwIKwB,GAEJA,KAGXiG,EAAcC,IAEZlF,GAAsB,SAACxD,EAAa+J,GACtC,IAAMrB,EAAa,YAAOvF,GAC1BuF,EAAc1I,GAAKiE,QAAQ+F,OAAOhK,EAAK,GAEvCyI,EAAcC,IAEZjF,GAAyB,SAACzD,EAAa+J,EAAmB3F,GAC5D,IAAMsE,EAAa,YAAOvF,GAC1BuF,EAAc1I,GAAKiE,QAAQ8F,GAAa3F,EAExCqE,EAAcC,IAGZhF,GAAyB,SAAC1D,EAAaiK,EAAyBC,GAClE,IAAMxB,EAAa,YAAOvF,GAC1BuF,EAAc1I,GAAKsE,YAAY2F,GAAiBjJ,KAAOkJ,EACvDzB,EAAcC,IAGZ/E,GAA2B,SAAC3D,EAAaiK,EAAyB9H,GACpE,IAAMuG,EAAa,YAAOvF,GAC1BuF,EAAc1I,GAAKsE,YAAY2F,GAAiBxF,OAAStC,EACzDsG,EAAcC,IAGZ9E,GAAkB,SAAC5D,GACrB,IAAM0I,EAAa,YAAOvF,GAC1BuF,EAAc1I,GAAKsE,YAAYyC,KAAKsB,KACpCI,EAAcC,IAGZ7E,GAAkB,SAAC7D,EAAaiK,GAClC,IAAMvB,EAAa,YAAOvF,GAC1BuF,EAAc1I,GAAKsE,YAAY0F,OAAOC,EAAiB,GACvDxB,EAAcC,IAGZzI,GAAmB,SAACD,EAAamK,GACnC,IAAMnB,EAAW,YAAOjJ,GACxBiJ,EAAYhJ,GAAKqB,KAAO8I,EACxBpB,EAAYC,IAGV9I,GAAsB,SAACF,EAAaoK,GACtC,IAAMpB,EAAW,YAAOjJ,GACxBiJ,EAAYhJ,GAAK0B,QAAU0I,EAC3BrB,EAAYC,IAGV7I,GAAuB,SAACH,EAAaqK,GACvC,IAAMrB,EAAW,YAAOjJ,GACxBiJ,EAAYhJ,GAAKwC,SAAW6H,EAC5BtB,EAAYC,IAGV5I,GAAY,SAACJ,GACf,IAAMgJ,EAAW,YAAOjJ,GACxBiJ,EAAYgB,OAAOhK,EAAK,EA3LjB,CACHqB,KAAM,OACNK,QAAS,IACTc,SAAS,yBAyLbuG,EAAYC,IAGV3I,GAAY,SAACL,GACf,IAAMgJ,EAAW,YAAOjJ,GACxBiJ,EAAYgB,OAAOhK,EAAK,GACxB+I,EAAYC,IAGV1I,GAAgB,WAClB,IAAMgK,EAAqB,GAI3B,OAHAnH,EAAW4B,SAAQ,SAACvC,GAChB8H,EAAc9H,EAASnB,MAAQmB,EAASnB,QAErC2D,OAAOC,KAAKqF,IA3NG,GA8NsBjB,oBAAS,GA9N/B,qBA8NnBkB,GA9NmB,MA8NDC,GA9NC,SA+NQnB,oBAAS,GA/NjB,qBA+NnBoB,GA/NmB,MA+NRC,GA/NQ,SAgOQrB,oBAAS,GAhOjB,qBAgOnBsB,GAhOmB,MAgORC,GAhOQ,SAiOQvB,oBAAS,GAjOjB,qBAiOnBwB,GAjOmB,MAiORC,GAjOQ,SAkOQzB,oBAAS,GAlOjB,qBAkOnB0B,GAlOmB,MAkORC,GAlOQ,MAoO1B,OACI,eAACC,EAAA,EAAD,CAAWC,OAAK,EAACrJ,MAAO,CAAEsJ,YAAa,MAAOC,aAAc,OAA5D,UACI,eAACC,EAAA,EAAD,WACI,gDACA,4SAGA,0DAC6B,mBAAGC,KAAK,2BAA2BC,IAAI,qBAAvC,4BAD7B,6BACqI,mBAAGD,KAAK,6CAA6CC,IAAI,qBAAzD,yBADrI,mCACkQ,mBAAGD,KAAK,8DAA8DC,IAAI,qBAA1E,oDADlQ,uEAGA,8BACI,cAAC1I,EAAA,EAAD,CAAQE,QAAQ,UAAUxC,UAAU,YAChCiL,gBAAc,uBACdC,gBAAelB,GAAkBzH,QAAS,YArKnC,WACvB,IAAM4I,EAAe,CACjB3L,SAAUA,EACVoD,WAAYA,GAEViG,EAAgBP,YAAe6C,EAAM7C,kBAC3CC,EAAaM,GAgKOuC,GACKpB,KACDG,IAAa,GACbE,IAAa,GACbE,IAAa,GACbE,IAAa,IAEjBR,IAAqBD,KAV7B,2BAYA,cAAC1H,EAAA,EAAD,CAAQE,QAAQ,UAAUxC,UAAU,YAChCiL,gBAAc,eAAe1I,QAAS,WAElCoG,EC/QjB,CACH/F,WAAY,CACR,CACI9B,KAAM,aACN4C,QAAS,CACL,CAAEC,OAAQ,OAAQlD,KAAM,SACxB,CAAEkD,OAAQ,OAAQlD,KAAM,SACxB,CAAEkD,OAAQ,OAAQlD,KAAM,SACxB,CAAEkD,OAAQ,OAAQlD,KAAM,iBACxB,CAAEkD,OAAQ,OAAQlD,KAAM,SACxB,CAAEkD,OAAQ,OAAQlD,KAAM,UAE5BsD,YAAa,CACT,CAAEtD,KAAM,QAASyD,OAAQ,GACzB,CAAEzD,KAAM,QAASyD,OAAQ,IACzB,CAAEzD,KAAM,SAAUyD,OAAQ,IAC1B,CAAEzD,KAAM,QAASyD,OAAQ,IACzB,CAAEzD,KAAM,gBAAiByD,OAAQ,IACjC,CAAEzD,KAAM,QAASyD,OAAQ,IACzB,CAAEzD,KAAM,OAAQyD,OAAQ,GACxB,CAAEzD,KAAM,QAASyD,OAAQ,KAGjC,CACIpD,KAAM,OACN4C,QAAS,CACL,CAAEC,OAAQ,MAAOlD,KAAM,UAE3BsD,YAAa,CACT,CAAEtD,KAAM,OAAQyD,OAAQ,GACxB,CAAEzD,KAAM,QAASyD,OAAQ,MAGjC,CACIpD,KAAM,gBACN4C,QAAS,CACL,CAAEC,OAAQ,OAAQlD,KAAM,SACxB,CAAEkD,OAAQ,OAAQlD,KAAM,SACxB,CAAEkD,OAAQ,KAAMlD,KAAM,SACtB,CAAEkD,OAAQ,OAAQlD,KAAM,SACxB,CAAEkD,OAAQ,OAAQlD,KAAM,SACxB,CAAEkD,OAAQ,MAAOlD,KAAM,SACvB,CAAEkD,OAAQ,OAAQlD,KAAM,UAE5BsD,YAAa,CACT,CAAEtD,KAAM,OAAQyD,OAAQ,GACxB,CAAEzD,KAAM,QAASyD,OAAQ,OAIrC1E,SAAU,CACN,CAAEsB,KAAM,OAAQK,QAAS,MAASc,SAAU,cAC5C,CAAEnB,KAAM,cAAeK,QAAS,IAASc,SAAU,QACnD,CAAEnB,KAAM,cAAeK,QAAS,IAASc,SAAU,mBD0NhB,IACnBkI,IAAa,GACbE,IAAa,GACbE,IAAa,GACbE,IAAa,GACbR,IAAoB,IAR5B,0BAUA,cAAC3H,EAAA,EAAD,CAAQE,QAAQ,UAAUxC,UAAU,YAChCiL,gBAAc,eAAe1I,QAAS,WAElCoG,EC7NjB,CACH/F,WAAY,CACR,CACI9B,KAAM,aACN4C,QAAS,CACL,CAAEC,OAAQ,OAAQlD,KAAM,UAE5BsD,YAAa,CACT,CAAEtD,KAAM,QAASyD,OAAQ,OAIrC1E,SAAU,CACN,CAAEsB,KAAM,OAAQK,QAAS,MAASc,SAAU,gBDgNT,IACnBkI,IAAa,GACbE,IAAa,GACbE,IAAa,GACbE,IAAa,GACbR,IAAoB,IAR5B,yBAYR,eAACS,EAAA,EAAD,CAAWpJ,MAAO,CAAEsJ,YAAa,OAAQC,aAAc,QAAvD,UACI,cAACQ,EAAA,EAAD,CAAUC,GAAItB,GAAd,SACI,cAAC9J,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKmB,MAAO,CAAEiK,OAAQ,WAAahJ,QAAS,WACxC0H,IAAqBD,KADzB,SAGI,mDAKR,cAAC9J,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,wFAKR,eAACD,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,eAACF,EAAA,EAAKuL,MAAN,CAAYC,UAAU,kBAAtB,UACI,cAACxL,EAAA,EAAKyL,MAAN,oCACA,cAACzL,EAAA,EAAKO,QAAN,CAAcwB,GAAG,WAAW2J,KAAM,EAC9B9K,MAAOmI,EACPjI,SAAU,SAACC,GACPiI,EAAajI,EAAEC,OAAOJ,eAItC,cAACV,EAAA,EAAD,UACI,eAACF,EAAA,EAAKuL,MAAN,CAAYC,UAAU,kBAAtB,UACI,cAACxL,EAAA,EAAKyL,MAAN,sBACA,cAACzL,EAAA,EAAKO,QAAN,CAAcwB,GAAG,WAAW2J,KAAM,EAC9BC,UAAU,EACV7K,SAAU,SAACC,KAGXH,MAAOqI,YAKvB,eAAChJ,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAACmC,EAAA,EAAD,CAAQtC,UAAU,OAAOuC,QAAS,WAC9B,IAAMqG,EAASN,QAAWU,EAAWV,kBACjCM,IACAD,EAAUC,EAAQI,GAClBiB,IAAoB,GACpBE,IAAa,GACbE,IAAa,GACbE,IAAa,GACbE,IAAa,KARrB,sBAcJ,cAACtK,EAAA,EAAD,UAMI,cAACmC,EAAA,EAAD,CAAQtC,UAAU,OAAOuC,QAAS,WAC9BsJ,UAAUC,UAAUC,UAAU7C,IADlC,2CAcpB,cAAChJ,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKmB,MAAO,CAAEiK,OAAQ,WAAahJ,QAAS,WACxC4H,IAAcD,KADlB,SAGI,wDAKR,cAACmB,EAAA,EAAD,CAAUC,GAAIpB,GAAd,SACI,cAAChK,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,yMAC4K,uDAD5K,yEAC+Q,yCAD/Q,WAKR,cAACD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UAEQyC,EAAWV,KAAI,SAAC8J,EAAqB5G,GACjC,OACI,cAAC,EAAD,CAEI3F,IAAK2F,EACLxC,WAAYA,EACZC,qBAAsBA,EACtBE,cAAesG,EACfvG,cAAewG,GACftG,oBAAqBA,GACrBC,oBAAqBA,GACrBC,uBAAwBA,GACxBC,uBAAwBA,GACxBC,yBAA0BA,GAC1BC,gBAAiBA,GACjBC,gBAAiBA,IAbrB,uBACyB8B,WAmB7C,eAAClF,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAACmC,EAAA,EAAD,CAAQtC,UAAU,OACduC,QAAS,WACL4H,IAAa,GACbE,IAAcD,IACdG,IAAa,IAJrB,yBASJ,cAACpK,EAAA,EAAD,UACI,cAACmC,EAAA,EAAD,CACItC,UAAU,OACVwC,QAAQ,kBACRD,QAAS8G,EAHb,sCAWpB,cAACnJ,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKmB,MAAO,CAAEiK,OAAQ,WAAahJ,QAAS,WACxC8H,IAAcD,KADlB,SAGI,6DAKR,cAACiB,EAAA,EAAD,CAAUC,GAAIlB,GAAd,SACI,cAAClK,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,sLAKR,cAACD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UAEQX,EAAS0C,KAAI,SAAC+J,EAAmBxM,GAC7B,OACI,cAAC,EAAD,CAEID,SAAUA,EACVC,IAAKA,EACLC,iBAAkBA,GAClBC,oBAAqBA,GACrBC,qBAAsBA,GACtBC,UAAWA,GACXC,UAAWA,GACXC,cAAeA,IATnB,sBACwBN,WAe5C,cAACS,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACmC,EAAA,EAAD,CAAQtC,UAAU,OACduC,QAAS,WACL4H,IAAa,GACbE,IAAa,GACbE,IAAa,IAJrB,mCAapB,cAACrK,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKmB,MAAO,CAAEiK,OAAQ,WAAahJ,QAAS,WACxCgI,IAAcD,KADlB,SAGI,yDAKR,cAACe,EAAA,EAAD,CAAUC,GAAIhB,GAAd,SACI,cAACpK,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,wRAKR,cAACD,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACmC,EAAA,EAAD,CAAQtC,UAAU,YAAYuC,QAAS,WACnC,IAAI2J,EAA4B,GAE1BC,EAAkB,GACxBvJ,EAAW4B,SAAQ,SAACvC,GAChBA,EAASyB,QAAQc,SAAQ,SAACb,GACtBwI,EAAWxI,EAAOA,QAAUA,EAAOA,aF1b1D,SAACD,GAAgG,IAA7EyF,EAA4E,wDACjHiD,EAAG,0EAAsE1I,EAAQ2I,KAAK,MAK1F,OAJuB,IAAnBlD,IACAiD,EAAG,sHAAkH1I,EAAQ2I,KAAK,OAG/HC,IAAMC,IAAIH,GAAKI,MAAK,SAAAC,GACvB,IAAMC,EAAwBD,EAAIE,KAClC,GAAID,EAASE,cAAcC,OAAQ,CAC/B,IAAMvI,EAAmB,GAIzB,OAHAoI,EAASE,cAAcC,OAAOrI,SAAQ,SAACsI,GACnCxI,EAAQkC,KAAKC,EAAeqG,OAEzBxI,MAEZyI,OAAM,SAAAC,GAEL,OADAtL,QAAQuL,MAAMD,GACP,ME4ayBE,CAAUzI,OAAOC,KAAKyH,GAAahD,GAAgBqD,MAAK,SAACnI,GACrD,GAAI8I,MAAMC,QAAQ/I,GAcd,OAbA7E,EAASgF,SAAQ,SAACJ,GACdxB,EAAW4B,SAAQ,SAACvC,GAChB,GAAIA,EAASnB,KAAKuM,gBAAkBjJ,EAAQnC,SAASoL,cAAe,CAEhE,IAAMC,EAAInJ,EAAeC,EAASnC,EAAUoC,GAC5C3C,QAAQC,IAAI2L,GACZpB,EAAe,sBAAOA,GAAP,YAA2BoB,WAItD5L,QAAQC,IAAIuK,GACZnD,EAAW,YAAImD,SACfzB,IAAa,GAGjB/I,QAAQuL,MAAR,+CAAsDM,KAAKC,UAAUnJ,SA1B7E,qBA+BA,cAAC/B,EAAA,EAAD,CAAQtC,UAAU,YAAYwC,QAAQ,oBAClCD,QAAS,WACL6G,GAAmBD,IAF3B,SAIKA,EAAiB,mBAAqB,6BAInD,cAACkC,EAAA,EAAD,CAAUC,GAAInC,EAAd,SACI,cAACjJ,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,uBAAMH,UAAU,mBAAhB,0OAC+N,uBAAM,uBADrO,oKAgBZ,cAACqL,EAAA,EAAD,CAAUC,GAAId,GAAd,SACI,cAACtK,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKH,UAAU,OAAf,SAEI,eAACyN,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,EAAxC,UACI,gCACI,+BACI,mCAEIxO,EAAc6C,KAAI,SAAC4L,EAAgB3L,GAC/B,OACI,6BAAiC2L,GAAjC,yBAA2B3L,YAM/C,gCAEQmC,EAAQpC,KAAI,SAAC2K,EAAgB1K,GACzB,OACI,+BACI,6BAAKA,EAAI,IACT,6BAAK0K,EAAO/L,OACZ,6BAAK+L,EAAOlJ,SACZ,6BAAKkJ,EAAOpM,OACZ,6BAAKoM,EAAOrH,SACZ,6BAAKiC,EAAWoF,EAAOhH,cACvB,6BAAK4B,EAAWoF,EAAO1G,iBACvB,6BAAKsB,EAAWoF,EAAOzG,aACvB,6BAAKqB,EAAWoF,EAAO/G,aACvB,6BAAK4B,EAAamF,EAAOxG,8BACzB,6BAAKqB,EAAamF,EAAOvG,6BACzB,6BAAKmB,EAAWoF,EAAOtG,iBAZ3B,sBAAwBpE,gBAqBpD,cAACjC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACmC,EAAA,EAAD,CAAQtC,UAAU,YAAYuC,QAAS,WACnCsJ,UAAUC,UAAUC,UApgB5C,SAACzH,GACrB,IAAMyJ,EAAU,CAAC,KAAD,OAAM1O,EAAcgN,KAAK,OAiBzC,OAhBA/H,EAAQE,SAAQ,SAACqI,EAAgB1K,GAC7B4L,EAAQvH,KAAK,CACTrE,EAAI,EADK,WAEL0K,EAAO/L,KAFF,gBAGL+L,EAAOlJ,OAHF,gBAILkJ,EAAOpM,KAJF,gBAKLoM,EAAOrH,OALF,gBAMLiC,EAAWoF,EAAOhH,YANb,gBAOL4B,EAAWoF,EAAO1G,eAPb,gBAQLsB,EAAWoF,EAAOzG,WARb,gBASLqB,EAAWoF,EAAO/G,WATb,gBAUL4B,EAAamF,EAAOxG,4BAVf,gBAWLqB,EAAamF,EAAOvG,2BAXf,gBAYLmB,EAAWoF,EAAOtG,aAZb,MAaX8F,KAAK,SAEJ0B,EAAQ1B,KAAK,MAkfsD2B,CAAgB1J,KADlD,yBAKA,cAAChC,EAAA,EAAD,CAAQtC,UAAU,YAAYuC,QAAS,WACnC4H,IAAa,GACbE,IAAa,GACbE,IAAa,IAHjB,mDE/lBjC0D,EAZH,WACV,OACE,cAAE,IAAM1K,SAAR,UAKE,cAAC,EAAD,OCCS2K,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e7d8b2a0.chunk.js","sourcesContent":["/**\n * An Allocation is a definition for string-number pairs.\n * Example: { 'small': 10.0, 'medium': 10.0 }\n * TODO: implement this correctly\n *\n * @export\n * @interface Allocation\n */\nexport interface Allocation {\n    type: string;\n    amount: number;\n}\n\nexport interface Account {\n    name: string;\n    balance: number;\n    strategy: string;\n}\n\nexport interface Symbol {\n    symbol: string;\n    type: string;\n}\n\nexport interface Strategy {\n    name: string;\n    symbols: Symbol[];\n    allocations: Allocation[];\n}\n\nexport interface Result {\n    name: string;                       // \"Name\",\n    symbol: string;                     // \"Symbol\",\n    type: string;                       // \"Type\",\n    shares: number;                     // \"Shares\",\n    sharePrice: number;                 // \"Share Price\",\n    purchasePrice: number;              // \"Purchase Price\",\n    allocated: number;                  // \"Allocated\",\n    remainder: number;                  // \"Remainder\",\n    symbolAllocationPercentage: number; // \"Symbol Allocation %\",\n    groupAllocationPercentage: number;  // \"Group Allocation %\",\n    fromBalance: number;                // \"From Balance\",\n}\n\nexport const ResultHeaders = [\n    \"Name\",\n    \"Symbol\",\n    \"Type\",\n    \"Shares\",\n    \"Share Price\",\n    \"Purchase Price\",\n    \"Allocated\",\n    \"Remainder\",\n    \"Symbol Allocation %\",\n    \"Group Allocation %\",\n    \"From Balance\",\n]\n\nexport interface Config {\n    accounts: Account[];\n    strategies: Strategy[];\n}\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { Account } from './models'\n\nexport interface AccountViewProps {\n    accounts: Account[];\n    idx: number;\n    onAcctNameChange: (idx: number, newName: string) => void;\n    onAcctBalanceChange: (idx: number, newBalance: number) => void;\n    onAcctStrategyChange: (idx: number, newStrategy: string) => void;\n    onAcctAdd: (idx: number) => void;\n    onAcctDel: (idx: number) => void;\n    getStrategies: () => string[];\n}\n\nexport const AccountView = function (props: AccountViewProps) {\n    const {\n        accounts,\n        idx,\n        onAcctNameChange,\n        onAcctBalanceChange,\n        onAcctStrategyChange,\n        onAcctAdd,\n        onAcctDel,\n        getStrategies,\n    } = props;\n\n    return (\n        <div className=\"mb-3\">\n            <Form>\n                <Row>\n                    <Col sm={3}>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    Name\n                        </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"401k\"\n                                data-idx={idx}\n                                id={`accounts-${idx}-name`}\n                                value={accounts[idx].name}\n                                onChange={(e: any): void => {\n                                    onAcctNameChange(idx, e.target.value);\n                                }} />\n                        </InputGroup>\n                    </Col>\n                    <Col sm={4}>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    Balance\n                        </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"401k\"\n                                data-idx={idx}\n                                data-balance={accounts[idx].balance}\n                                id={`accounts-${idx}-balance`}\n                                value={accounts[idx].balance}\n                                onBlur={(e: React.FocusEvent<HTMLInputElement>): void => {\n                                    e.target.value = accounts[idx].balance.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\n                                }}\n                                onChange={(e: any): void => {\n                                    const balanceAsNumbers = e.target.value.replace(/[^0-9.-]+/g, \"\");\n                                    console.log(balanceAsNumbers);\n                                    if (balanceAsNumbers === '') {\n                                        onAcctBalanceChange(idx, 0.0);\n                                        return;\n                                    }\n                                    const newAmount = Number.parseFloat(balanceAsNumbers);\n                                    if (Number.isNaN(newAmount)) {\n                                        return;\n                                    }\n                                    onAcctBalanceChange(idx, newAmount);\n                                }} />\n                        </InputGroup>\n                    </Col>\n                    <Col sm={4}>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    Strategy\n                        </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control as=\"select\"\n                                id={`accounts-${idx}-strategy`}\n                                value={accounts[idx].strategy}\n                                onChange={(e: any): void => {\n                                    onAcctStrategyChange(idx, e.target.value);\n                                }}>\n                                {\n                                    getStrategies().map((strategy: string, i: number): JSX.Element => {\n                                        return (\n                                            <option key={`account-${idx}-strategy-option-${i}`}>{strategy}</option>\n                                        )\n                                    })\n                                }\n                            </Form.Control>\n                            {/* <Form.Control\n                                type=\"text\"\n                                placeholder=\"401k\"\n                                data-idx={idx}\n                                id={`accounts-${idx}-strategy`}\n                                value={accounts[idx].strategy}\n                                onChange={(e: any): void => {\n                                    onAcctStrategyChange(idx, e.target.value);\n                                }} /> */}\n                        </InputGroup>\n                    </Col>\n                    <Col sm={1}>\n                        <ButtonGroup aria-label={`accounts-manage-buttons-${idx}`}>\n                            <Button\n                                onClick={() => {\n                                    onAcctAdd(idx);\n                                }}>\n                                +\n                            </Button>\n                            <Button variant=\"danger\"\n                                disabled={accounts.length <= 1}\n                                onClick={() => {\n                                    onAcctDel(idx);\n                                }}>\n                                -\n                            </Button>\n                        </ButtonGroup>\n                    </Col>\n                </Row>\n            </Form>\n        </div >\n\n    )\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { Symbol, Strategy, Allocation } from './models'\n\nexport interface StrategyViewProps {\n    idx: number;\n    strategies: Strategy[]; // strategies state directly passed in\n    onStrategyNameChange: (e: any, idx: number) => void;\n    onStrategyAdd: () => void;\n    onStrategyDel: (idx: number) => void;\n    onStrategySymbolAdd: (idx: number) => void;\n    onStrategySymbolDel: (idx: number, symbolIdx: number) => void;\n    onStrategySymbolChange: (idx: number, symbolIdx: number, newSymbol: Symbol) => void;\n    onAllocationTypeChange: (idx: number, allocationIndex: number, newType: string) => void;\n    onAllocationAmountChange: (idx: number, allocationIndex: number, newAmount: number) => void;\n    onAllocationAdd: (idx: number) => void;\n    onAllocationDel: (idx: number, allocationIndex: number) => void;\n}\n\nconst StrategyView = function (props: StrategyViewProps) {\n    const {\n        idx,\n        strategies,\n        onStrategyNameChange,\n        onStrategyAdd,\n        onStrategyDel,\n        onStrategySymbolAdd,\n        onStrategySymbolDel,\n        onStrategySymbolChange,\n        onAllocationTypeChange,\n        onAllocationAmountChange,\n        onAllocationAdd,\n        onAllocationDel,\n    } = props;\n\n    return (\n        <React.Fragment key={`strategy-${idx}`}>\n            <Row className=\"border-top pt-3\">\n                <Col>\n                    <label htmlFor={`strategy-name-${idx}`}>Strategy name</label>\n                    <InputGroup className=\"mb-3\">\n                        {/* <InputGroup.Prepend>\n                            <InputGroup.Text>\n                                <b>Name</b>\n                            </InputGroup.Text>\n                        </InputGroup.Prepend> */}\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"401k\"\n                            data-idx={idx}\n                            name={`strategy-name-${idx}`}\n                            id={`strategy-name-${idx}`}\n                            value={strategies[idx].name}\n                            onChange={(e: any) => {\n                                onStrategyNameChange(e, idx);\n                            }}\n                        />\n                        <InputGroup.Append>\n                            <Button\n                                className=\"\"\n                                variant=\"outline-danger\"\n                                disabled={strategies.length <= 1}\n                                onClick={() => {\n                                    onStrategyDel(idx);\n                                }}>\n                                -\n                            </Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Col>\n            </Row>\n            {/* <Row>\n                <Col sm={5}>\n                    <p>\n                        For the investment strategy \"{strategies[idx].name}\", choose the ETFs/stocks you want to invest in on the left.\n                    </p>\n                </Col>\n                <Col sm={7}>\n                    <p>\n                        On the right, you can classify each ETF/stock. For example, SCHB is a broad market index ETF, so you might want to classify it as \"broad\". Similarly, SCHM is a medium-cap index ETF, so you could label it as \"medium\".\n                    </p>\n                </Col>\n            </Row> */}\n            <Row>\n                <Col sm={1}></Col>\n                <Col sm={11}>\n                    <p className=\"text-muted\">\n                        <i><b>Symbols</b> - choose the symbols (stock/ETF names) and their allocations (grouping) here.</i>\n                    </p>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {\n                        strategies[idx].symbols.map((symbol: Symbol, i: number): JSX.Element => {\n                            return (\n                                <Row key={`strategy-${idx}-symbols-${i}-row`}>\n                                    <Col sm={1}></Col>\n                                    <Col sm={5}>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Text>\n                                                    Symbol\n                                                </InputGroup.Text>\n                                            </InputGroup.Prepend>\n                                            <Form.Control\n                                                type=\"text\"\n                                                placeholder=\"SCHB\"\n                                                data-idx={idx}\n                                                data-symbol-idx={i}\n                                                id={`strategy-${idx}-symbols-${i}-symbol`}\n                                                value={strategies[idx].symbols[i].symbol}\n                                                onChange={(e: any): void => {\n                                                    const newSymbol = strategies[idx].symbols[i];\n                                                    newSymbol.symbol = e.target.value.toUpperCase();\n                                                    onStrategySymbolChange(idx, i, newSymbol);\n                                                }} />\n                                        </InputGroup>\n                                    </Col>\n                                    <Col sm={6}>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Text>\n                                                    Type\n                                                </InputGroup.Text>\n                                            </InputGroup.Prepend>\n                                            <Form.Control\n                                                type=\"text\"\n                                                placeholder=\"broad\"\n                                                data-idx={idx}\n                                                data-symbol-idx={i}\n                                                id={`strategy-${idx}-symbols-${i}-type`}\n                                                value={strategies[idx].symbols[i].type}\n                                                onChange={(e: any): void => {\n                                                    const newSymbol = strategies[idx].symbols[i];\n                                                    newSymbol.type = e.target.value;\n                                                    onStrategySymbolChange(idx, i, newSymbol);\n                                                }} />\n                                            <InputGroup.Append>\n                                                <Button\n                                                    className=\"\"\n                                                    variant=\"outline-secondary\"\n                                                    onClick={() => {\n                                                        onStrategySymbolAdd(idx);\n                                                    }}>\n                                                    +\n                                                </Button>\n                                                <Button\n                                                    className=\"\"\n                                                    variant=\"outline-secondary\"\n                                                    disabled={strategies[idx].symbols.length <= 1}\n                                                    onClick={() => {\n                                                        onStrategySymbolDel(idx, i);\n                                                    }}>\n                                                    -\n                                                </Button>\n                                            </InputGroup.Append>\n                                        </InputGroup>\n                                    </Col>\n                                </Row>\n                            )\n                        })\n                    }\n                </Col>\n            </Row>\n            {/* <Row>\n                <Col sm={5}>\n                    <p>\n                        For the investment strategy \"{strategies[idx].name}\", choose how you want to distribute money across the labels from above. For example, since we classified \"broad\" and \"medium\" above, we should have \"broad\" and \"medium\" entries as well.\n                    </p>\n                </Col>\n                <Col sm={7}>\n                    <p>\n                        On the right, you can specify what percentage of the total money will be allocated to this category. For example, if you wanted to allocate 50% of one of your accounts to all symbols with the \"broad\" classification, you would put 50% in this column, and in the left column, you would put \"broad\".\n                    </p>\n                </Col>\n            </Row> */}\n            <Row>\n                <Col sm={1}></Col>\n                <Col sm={11}>\n                    <p className=\"text-muted\">\n                        <i><b>Allocations</b> - choose how to group and divide the above stocks/ETFs here.</i>\n                    </p>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {\n                        strategies[idx].allocations.map((allocation: Allocation, i: number): JSX.Element => {\n                            return (\n                                <Row key={`strategy-${idx}-allocations-${i}-row`}>\n                                    <Col sm={1} xs={0}></Col>\n                                    <Col xs={6} sm={5}>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Text>\n                                                    Type\n                                                </InputGroup.Text>\n                                            </InputGroup.Prepend>\n                                            <Form.Control\n                                                type=\"text\"\n                                                placeholder=\"broad\"\n                                                data-idx={idx}\n                                                data-symbol-idx={i}\n                                                id={`strategy-${idx}-allocations-${i}-type`}\n                                                value={strategies[idx].allocations[i].type}\n                                                onChange={(e: any): void => {\n                                                    onAllocationTypeChange(idx, i, e.target.value);\n                                                }} />\n                                        </InputGroup>\n                                    </Col>\n                                    <Col xs={6} sm={6}>\n                                        <InputGroup className=\"mb-3\">\n                                            {/* <InputGroup.Prepend>\n                                                <InputGroup.Text>\n                                                    Amount (%)\n                                                </InputGroup.Text>\n                                            </InputGroup.Prepend> */}\n                                            <Form.Control\n                                                type=\"number\"\n                                                placeholder=\"broad\"\n                                                data-idx={idx}\n                                                data-symbol-idx={i}\n                                                id={`strategy-${idx}-allocations-${i}-amount`}\n                                                value={strategies[idx].allocations[i].amount}\n                                                onChange={(e: any): void => {\n                                                    let newAmount = Number.parseFloat(e.target.value);\n                                                    if (Number.isNaN(newAmount)) {\n                                                        newAmount = 0;\n                                                    }\n                                                    onAllocationAmountChange(idx, i, newAmount);\n                                                }} />\n                                            <InputGroup.Append>\n                                                <InputGroup.Text>\n                                                    %\n                                                </InputGroup.Text>\n                                                <Button\n                                                    className=\"\"\n                                                    variant=\"outline-secondary\"\n                                                    onClick={() => {\n                                                        onAllocationAdd(idx);\n                                                    }}>\n                                                    +\n                                                </Button>\n                                                <Button\n                                                    className=\"\"\n                                                    variant=\"outline-secondary\"\n                                                    disabled={strategies[idx].allocations.length <= 1}\n                                                    onClick={() => {\n                                                        onAllocationDel(idx, i);\n                                                    }}>\n                                                    -\n                                                </Button>\n                                            </InputGroup.Append>\n                                        </InputGroup>\n                                    </Col>\n                                </Row>\n                            )\n                        })\n                    }\n                </Col>\n            </Row>\n        </React.Fragment >\n    );\n}\n\nexport default StrategyView;\n\n","import { Account, Allocation, Strategy, Symbol, Result } from './models';\nimport { Quote } from './quote';\n\n// const getStrategyForSymbol = (strategies: Strategy[], symbolName: string): Strategy | null => {\n//     const result = strategies.filter((strategy: Strategy) => {\n//         const strategySearchResults = strategy.symbols.filter((symbol: Symbol) => {\n//             if (symbol.symbol === symbolName) {\n//                 return symbol\n//             }\n//         })\n//     })\n//     if (results.length === 1) {\n//         return results[0]\n//     }\n//     return null\n// }\n\nconst getAllocation = (strategy: Strategy, allocationType: string): Allocation => {\n    const results = strategy.allocations.filter((allocation: Allocation, i: number) => {\n        if (allocation.type === allocationType) {\n            console.log(allocation);\n            return allocation;\n        }\n    })\n\n    if (results.length === 1) {\n        return results[0];\n    }\n    console.warn('matched multiple or no allocations, should only have found one');\n    return { type: '', amount: 0.0 };\n}\n\nexport const BalanceAccount = (account: Account, strategy: Strategy, quotes: Quote[]): Result[] => {\n    // first, group symbols according to their classification\n    // https://github.com/charles-m-knox/goinvest/blob/main/helpers/helpers.go#L21-L28\n    const results: Result[] = [];\n    const groups: any = {};\n    strategy.symbols.forEach((symbol: Symbol, i: number) => {\n        if (!groups[symbol.type]) {\n            groups[symbol.type] = {};\n        }\n        groups[symbol.type][symbol.symbol] = {};\n    });\n\n    console.log(groups);\n\n    // now that symbols are all grouped, proceed to apply allocations\n    Object.keys(groups).forEach((group: string, i: number) => {\n        // Need to retrieve the allocation percentage for a group by its name\n        // strategy -> allocations -> group\n        const groupAllocation = getAllocation(strategy, group);\n        if (groupAllocation.type) {\n            // example: if 3 symbols are \"large\", and the \"large\" group gets 30%\n            // of $10k, groupAllocationAmount = 3000\n            const groupAllocationAmount = (groupAllocation.amount / 100.0) * account.balance;\n\n            // example: if 3 symbols are \"large\", and the \"large\" group gets 30%\n            // of $10k, allocPercentageFromTotal = 10%\n            const allocPercentageFromTotal = groupAllocation.amount / (Object.keys(groups[group]).length)\n\n            // example: if 3 symbols are \"large\", and the \"large\" group gets 30%\n            // of $10k, allocPerSymbol = 1000\n            const allocPerSymbol = groupAllocationAmount / (Object.keys(groups[group]).length)\n\n            console.log(groupAllocationAmount, allocPercentageFromTotal, allocPerSymbol);\n            Object.keys(groups[group]).forEach((symbol: string, j: number) => {\n                quotes.forEach((quote: Quote, k: number) => {\n                    if (quote.rawQuote.symbol === symbol) {\n                        const shares = Math.floor(allocPerSymbol / quote.price);\n                        const totalAllocated = shares * quote.price;\n                        groups[group][symbol] = {\n                            shares: shares,\n                            sharePrice: quote.price,\n                            remainder: allocPerSymbol - totalAllocated,\n                            totalAllocated: totalAllocated,\n                            idealAllocation: allocPerSymbol,\n                            idealGroupAllocationPercentage: groupAllocation.amount,\n                            idealSymbolAllocationPercentage: allocPercentageFromTotal,\n                        };\n                        const newResult = {\n                            name: account.name,\n                            symbol: symbol,\n                            type: group,\n                            shares: shares,\n                            sharePrice: quote.price,\n                            purchasePrice: totalAllocated,\n                            allocated: allocPerSymbol,\n                            remainder: groups[group][symbol].remainder,\n                            symbolAllocationPercentage: groups[group][symbol].idealSymbolAllocationPercentage,\n                            groupAllocationPercentage: groups[group][symbol].idealGroupAllocationPercentage,\n                            fromBalance: account.balance,\n                        };\n                        console.log(newResult);\n                        results.push(newResult);\n                    }\n                })\n            })\n            console.log(groups);\n        }\n    });\n    return results;\n}\n","import axios from 'axios';\n\nconst TransformQuote = (quote: RawQuote): Quote => {\n    const tQuote: Quote = {\n        rawQuote: quote,\n        price: 0.0,\n        change: 0.0,\n        changePercent: 0.0,\n        isActive: false,\n        isRegularTradingSession: false,\n    };\n\n    if (quote.marketState === \"REGULAR\") {\n        tQuote.price = quote.regularMarketPrice;\n        tQuote.change = quote.regularMarketChange;\n        tQuote.changePercent = quote.regularMarketChangePercent;\n        tQuote.isActive = true;\n        tQuote.isRegularTradingSession = true;\n        return tQuote;\n    }\n\n    if (quote.marketState === \"POST\" && quote.postMarketPrice === 0.0) {\n        tQuote.rawQuote = quote;\n        tQuote.price = quote.regularMarketPrice;\n        tQuote.change = quote.regularMarketChange;\n        tQuote.changePercent = quote.regularMarketChangePercent;\n        tQuote.isActive = true;\n        tQuote.isRegularTradingSession = false;\n        return tQuote;\n    }\n\n    if (quote.marketState === \"PRE\" && quote.preMarketPrice === 0.0) {\n        tQuote.rawQuote = quote;\n        tQuote.price = quote.regularMarketPrice;\n        tQuote.change = quote.regularMarketChange;\n        tQuote.changePercent = quote.regularMarketChangePercent;\n        tQuote.isActive = false;\n        tQuote.isRegularTradingSession = false;\n        return tQuote;\n    }\n\n    if (quote.marketState === \"POST\") {\n        tQuote.rawQuote = quote;\n        tQuote.price = quote.postMarketPrice;\n        tQuote.change = quote.postMarketChange + quote.regularMarketChange;\n        tQuote.changePercent = quote.postMarketChangePercent + quote.regularMarketChangePercent;\n        tQuote.isActive = true;\n        tQuote.isRegularTradingSession = false;\n        return tQuote;\n    }\n\n    if (quote.marketState === \"PRE\") {\n        tQuote.rawQuote = quote;\n        tQuote.price = quote.preMarketPrice;\n        tQuote.change = quote.preMarketChange;\n        tQuote.changePercent = quote.preMarketChangePercent;\n        tQuote.isActive = true;\n        tQuote.isRegularTradingSession = false;\n        return tQuote;\n    }\n\n    if (quote.postMarketPrice !== 0.0) {\n        tQuote.rawQuote = quote;\n        tQuote.price = quote.postMarketPrice;\n        tQuote.change = quote.postMarketChange + quote.regularMarketChange;\n        tQuote.changePercent = quote.postMarketChangePercent + quote.regularMarketChangePercent;\n        tQuote.isActive = false;\n        tQuote.isRegularTradingSession = false;\n        return tQuote;\n    }\n\n    tQuote.rawQuote = quote;\n    tQuote.price = quote.regularMarketPrice;\n    tQuote.change = quote.regularMarketChange;\n    tQuote.changePercent = quote.regularMarketChangePercent;\n    tQuote.isActive = false;\n    tQuote.isRegularTradingSession = false;\n    return tQuote;\n}\n\nexport const GetQuotes = (symbols: string[], useYahooDirect: boolean = false): Promise<Quote[] | never[] | undefined> => {\n    let url = `https://873laarwv8.execute-api.us-west-2.amazonaws.com/?symbols=${symbols.join(',')}`;\n    if (useYahooDirect === true) {\n        url = `https://query1.finance.yahoo.com/v7/finance/quote?lang=en-US&region=US&corsDomain=finance.yahoo.com&symbols=${symbols.join(',')}`;\n    }\n\n    return axios.get(url).then(res => {\n        const response: APIResponse = res.data;\n        if (response.quoteResponse.result) {\n            const results: Quote[] = [];\n            response.quoteResponse.result.forEach((rq: RawQuote) => {\n                results.push(TransformQuote(rq));\n            })\n            return results;\n        }\n    }).catch(err => {\n        console.error(err);\n        return [];\n    })\n}\n\nexport interface Quote {\n    rawQuote: RawQuote;\n    price: number;\n    change: number;\n    changePercent: number;\n    isActive: boolean;\n    isRegularTradingSession: boolean;\n}\n\n// http://www.json2ts.com/#\nexport interface RawQuote {\n    language: string;\n    region: string;\n    quoteType: string;\n    quoteSourceName: string;\n    triggerable: boolean;\n    currency: string;\n    marketState: string;\n    messageBoardId: string;\n    exchangeTimezoneName: string;\n    exchangeTimezoneShortName: string;\n    gmtOffSetMilliseconds: number;\n    market: string;\n    esgPopulated: boolean;\n    tradeable: boolean;\n    exchange: string;\n    shortName: string;\n    longName: string;\n    firstTradeDateMilliseconds: any;\n    priceHint: number;\n\n    // may or may not be present depending on when the API is hit\n    exchangeName: string;\n    exchangeDelay: number;\n    preMarketChange: number;\n    preMarketChangePercent: number;\n    preMarketPrice: number;\n\n    postMarketChangePercent: number;\n    postMarketTime: number;\n    postMarketPrice: number;\n    postMarketChange: number;\n    regularMarketChange: number;\n    regularMarketChangePercent: number;\n    regularMarketTime: number;\n    regularMarketPrice: number;\n    regularMarketDayHigh: number;\n    regularMarketDayRange: string;\n    regularMarketDayLow: number;\n    regularMarketVolume: number;\n    regularMarketPreviousClose: number;\n    bid: number;\n    ask: number;\n    bidSize: number;\n    askSize: number;\n    fullExchangeName: string;\n    financialCurrency: string;\n    regularMarketOpen: number;\n    averageDailyVolume3Month: number;\n    averageDailyVolume10Day: number;\n    fiftyTwoWeekLowChange: number;\n    fiftyTwoWeekLowChangePercent: number;\n    fiftyTwoWeekRange: string;\n    fiftyTwoWeekHighChange: number;\n    fiftyTwoWeekHighChangePercent: number;\n    fiftyTwoWeekLow: number;\n    fiftyTwoWeekHigh: number;\n    earningsTimestamp: number;\n    earningsTimestampStart: number;\n    earningsTimestampEnd: number;\n    trailingPE: number;\n    epsTrailingTwelveMonths: number;\n    epsForward: number;\n    epsCurrentYear: number;\n    priceEpsCurrentYear: number;\n    sharesOutstanding: number;\n    bookValue: number;\n    fiftyDayAverage: number;\n    fiftyDayAverageChange: number;\n    fiftyDayAverageChangePercent: number;\n    twoHundredDayAverage: number;\n    twoHundredDayAverageChange: number;\n    twoHundredDayAverageChangePercent: number;\n    marketCap: any;\n    forwardPE: number;\n    priceToBook: number;\n    sourceInterval: number;\n    exchangeDataDelayedBy: number;\n    displayName: string;\n    symbol: string;\n    dividendDate?: number;\n    trailingAnnualDividendRate?: number;\n    trailingAnnualDividendYield?: number;\n    [key: string]: any; // allows for values we haven't specified above\n}\n\nexport interface QuoteResponse {\n    result: RawQuote[];\n    error?: any;\n}\n\nexport interface APIResponse {\n    quoteResponse: QuoteResponse;\n}\n","export const asCurrency = (amount: number): string => {\n    return amount.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\n}\nexport const asPercentage = (amount: number): string => {\n    return `${amount.toFixed(2)}%`;\n}\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n// import InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport { Config, Symbol, Strategy, Account, Allocation, Result, ResultHeaders } from './models'\nimport { AccountView } from './account'\nimport StrategyView from './strategy';\nimport { BalanceAccount } from './balancer';\nimport { ResultsView } from './results';\nimport { GetQuotes } from './quote';\nimport Collapse from 'react-bootstrap/Collapse'\nimport * as yaml from 'yaml';\nimport { asCurrency, asPercentage } from './helpers';\nimport { GetCompleteExample, GetEmptyExample } from './example';\n\nconst InvestmentsView = () => {\n    const getBasicSymbol = (): Symbol => {\n        return {\n            symbol: 'SCHB',\n            type: 'broad',\n        }\n    }\n\n    const getBasicStrategy = (): Strategy => {\n        return {\n            name: `AggressiveRetirement`,\n            symbols: [getBasicSymbol()],\n            allocations: [getBasicAllocation()],\n        }\n    }\n\n    const getBasicAccount = (): Account => {\n        return {\n            name: '401k',\n            balance: 100000.0,\n            strategy: `AggressiveRetirement`,\n        }\n    }\n\n    const getBasicAllocation = (): Allocation => {\n        return {\n            type: 'broad',\n            amount: 100.0,\n        }\n    }\n\n    const getBasicResult = (): Result => {\n        return {\n            name: 'AggressiveRetirement1',\n            symbol: 'SCHB',\n            type: 'broad',\n            shares: 0.0,\n            sharePrice: 0.0,\n            purchasePrice: 0.0,\n            allocated: 0.0,\n            remainder: 0.0,\n            symbolAllocationPercentage: 0.0,\n            groupAllocationPercentage: 0.0,\n            fromBalance: 0.0,\n        }\n    }\n\n    const getConfig = (accts: Account[], strats: Strategy[]): Config => {\n        const conf: Config = {\n            accounts: accts,\n            strategies: strats,\n        };\n\n        return conf;\n    }\n\n    const setStrategies = (newStrategies: Strategy[]) => {\n        setStrategiesState(newStrategies);\n        const newStrategiesYaml = yaml.stringify(getConfig(accounts, newStrategies), yaml.defaultOptions);\n        setExportStr(newStrategiesYaml);\n    }\n\n    const setAccounts = (newAccounts: Account[]) => {\n        setAccountsState(newAccounts);\n        const newStrategiesYaml = yaml.stringify(getConfig(newAccounts, strategies), yaml.defaultOptions);\n        setExportStr(newStrategiesYaml);\n    }\n\n    const setConfig = (config: Config, configYamlStr: string) => {\n        setStrategiesState(config.strategies);\n        setAccountsState(config.accounts);\n        if (configYamlStr) {\n            setExportStr(configYamlStr);\n        }\n    }\n\n    const setExportStrSimple = () => {\n        const conf: Config = {\n            accounts: accounts,\n            strategies: strategies,\n        };\n        const configYamlStr = yaml.stringify(conf, yaml.defaultOptions);\n        setExportStr(configYamlStr);\n    }\n\n    const getResultsAsCSV = (results: Result[]): string => {\n        const csvRows = [`#,${ResultHeaders.join(',')}`];\n        results.forEach((result: Result, i: number) => {\n            csvRows.push([\n                i + 1,\n                `\"${result.name}\"`,\n                `\"${result.symbol}\"`,\n                `\"${result.type}\"`,\n                `\"${result.shares}\"`,\n                `\"${asCurrency(result.sharePrice)}\"`,\n                `\"${asCurrency(result.purchasePrice)}\"`,\n                `\"${asCurrency(result.allocated)}\"`,\n                `\"${asCurrency(result.remainder)}\"`,\n                `\"${asPercentage(result.symbolAllocationPercentage)}\"`,\n                `\"${asPercentage(result.groupAllocationPercentage)}\"`,\n                `\"${asCurrency(result.fromBalance)}\"`,\n            ].join(','));\n        });\n        return csvRows.join('\\n');\n    }\n\n    const [strategies, setStrategiesState] = useState([getBasicStrategy()]);\n    const [accounts, setAccountsState] = useState([getBasicAccount()]);\n    const [results, setResults] = useState([getBasicResult()]);\n    const [importStr, setImportStr] = useState('');\n    const [exportStr, setExportStr] = useState('');\n    const [useYahooDirect, setUseYahooDirect] = useState(false);\n\n    const onStrategyNameChange = (e: any, idx: number) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].name = e.target.value;\n        // leaving this here if needed\n        // newStrategies[e.target.dataset.idx].name = e.target.value;\n        setStrategies(newStrategies);\n    }\n\n    const addStrategy = () => {\n        setStrategies([...strategies, { ...getBasicStrategy() }]);\n    }\n\n    const delStrategy = (idx: number) => {\n        const newStrategies = strategies.filter((s: Strategy, i: number) => {\n            if (i !== idx) {\n                return s;\n            }\n        })\n\n        setStrategies(newStrategies);\n    }\n\n    const onStrategySymbolAdd = (idx: number) => {\n        const newStrategies = strategies.map((strategy: Strategy, i: number) => {\n            // strategy.allocations = getAllocations(strategy);\n            if (idx === i) {\n                strategy.symbols.push(getBasicSymbol());\n                return strategy\n            }\n            return strategy;\n        });\n\n        setStrategies(newStrategies);\n    }\n    const onStrategySymbolDel = (idx: number, symbolIdx: number) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].symbols.splice(idx, 1);\n        // updateAllAllocations(newStrategies);\n        setStrategies(newStrategies);\n    }\n    const onStrategySymbolChange = (idx: number, symbolIdx: number, newSymbol: Symbol) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].symbols[symbolIdx] = newSymbol;\n        // updateAllAllocations(newStrategies);\n        setStrategies(newStrategies);\n    }\n\n    const onAllocationTypeChange = (idx: number, allocationIndex: number, newType: string) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].allocations[allocationIndex].type = newType;\n        setStrategies(newStrategies);\n    }\n\n    const onAllocationAmountChange = (idx: number, allocationIndex: number, newAmount: number) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].allocations[allocationIndex].amount = newAmount;\n        setStrategies(newStrategies);\n    }\n\n    const onAllocationAdd = (idx: number) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].allocations.push(getBasicAllocation());\n        setStrategies(newStrategies);\n    }\n\n    const onAllocationDel = (idx: number, allocationIndex: number) => {\n        const newStrategies = [...strategies];\n        newStrategies[idx].allocations.splice(allocationIndex, 1);\n        setStrategies(newStrategies);\n    }\n\n    const onAcctNameChange = (idx: number, newName: string) => {\n        const newAccounts = [...accounts];\n        newAccounts[idx].name = newName;\n        setAccounts(newAccounts);\n    }\n\n    const onAcctBalanceChange = (idx: number, newBalance: number) => {\n        const newAccounts = [...accounts];\n        newAccounts[idx].balance = newBalance;\n        setAccounts(newAccounts);\n    }\n\n    const onAcctStrategyChange = (idx: number, newStrategy: string) => {\n        const newAccounts = [...accounts];\n        newAccounts[idx].strategy = newStrategy;\n        setAccounts(newAccounts);\n    }\n\n    const onAcctAdd = (idx: number) => {\n        const newAccounts = [...accounts];\n        newAccounts.splice(idx, 0, getBasicAccount());\n        setAccounts(newAccounts);\n    }\n\n    const onAcctDel = (idx: number) => {\n        const newAccounts = [...accounts];\n        newAccounts.splice(idx, 1);\n        setAccounts(newAccounts);\n    }\n\n    const getStrategies = (): string[] => {\n        const strategiesObj: any = {};\n        strategies.forEach((strategy: Strategy) => {\n            strategiesObj[strategy.name] = strategy.name;\n        });\n        return Object.keys(strategiesObj);\n    }\n\n    const [importExportOpen, setImportExportOpen] = useState(false);\n    const [step1Open, setStep1Open] = useState(true);\n    const [step2Open, setStep2Open] = useState(false);\n    const [step3Open, setStep3Open] = useState(false);\n    const [tableOpen, setTableOpen] = useState(false);\n\n    return (\n        <Container fluid style={{ paddingLeft: '0px', paddingRight: '0px' }}>\n            <Jumbotron >\n                <h1>Invest faster!</h1>\n                <p>\n                    Use this tool to balance your financial accounts according to strategies that you set up. If you have multiple financial accounts, but the same financial strategies across many of them and need to split share prices across different account balances, this is for you.\n                </p>\n                <p>\n                    This tool was written by <a href=\"https://charlesmknox.com\" rel=\"noopener noreferer\">charles-m-knox</a>. View the source code on <a href=\"https://github.com/charles-m-knox/jsinvest\" rel=\"noopener noreferer\">GitHub here</a>. If you want to send me a tip, <a href=\"https://charlesmknox.com/about/#ways-to-support-me-directly\" rel=\"noopener noreferer\">visit the \"about\" page on my site here</a>. I do not store any data about your interactions with this site.\n                </p>\n                <p>\n                    <Button variant=\"primary\" className=\"mr-3 mb-3\"\n                        aria-controls=\"import-export-opener\"\n                        aria-expanded={importExportOpen} onClick={() => {\n                            setExportStrSimple();\n                            if (!importExportOpen) {\n                                setStep1Open(false);\n                                setStep2Open(false);\n                                setStep3Open(false);\n                                setTableOpen(false);\n                            }\n                            setImportExportOpen(!importExportOpen);\n                        }}>Import/export</Button>\n                    <Button variant=\"primary\" className=\"mr-3 mb-3\"\n                        aria-controls=\"load-example\" onClick={() => {\n                            const example = GetCompleteExample();\n                            setConfig(example, \"\");\n                            setStep1Open(true);\n                            setStep2Open(false);\n                            setStep3Open(false);\n                            setTableOpen(false);\n                            setImportExportOpen(false);\n                        }}>Load Example</Button>\n                    <Button variant=\"primary\" className=\"mr-3 mb-3\"\n                        aria-controls=\"load-example\" onClick={() => {\n                            const example = GetEmptyExample();\n                            setConfig(example, \"\");\n                            setStep1Open(true);\n                            setStep2Open(false);\n                            setStep3Open(false);\n                            setTableOpen(false);\n                            setImportExportOpen(false);\n                        }}>Reset</Button>\n                </p>\n            </Jumbotron>\n            <Container style={{ paddingLeft: '15px', paddingRight: '15px' }}>\n                <Collapse in={importExportOpen}>\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col style={{ cursor: 'pointer' }} onClick={() => {\n                                    setImportExportOpen(!importExportOpen);\n                                }}>\n                                    <h2>\n                                        Import/export\n                                    </h2>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <p>\n                                        You can also import/export using the below options.\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Form.Group controlId=\"import-textarea\">\n                                        <Form.Label>Paste here to Import:</Form.Label>\n                                        <Form.Control as=\"textarea\" rows={6}\n                                            value={importStr}\n                                            onChange={(e: any) => {\n                                                setImportStr(e.target.value);\n                                            }} />\n                                    </Form.Group>\n                                </Col>\n                                <Col>\n                                    <Form.Group controlId=\"export-textarea\">\n                                        <Form.Label>Export:</Form.Label>\n                                        <Form.Control as=\"textarea\" rows={6}\n                                            readOnly={true}\n                                            onChange={(e: any) => {\n                                                // console.log(e.target.value);\n                                            }}\n                                            value={exportStr}\n                                        />\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Button className=\"mb-3\" onClick={() => {\n                                        const config = yaml.parse(importStr, yaml.defaultOptions);\n                                        if (config) {\n                                            setConfig(config, importStr);\n                                            setImportExportOpen(false);\n                                            setStep1Open(true);\n                                            setStep2Open(true);\n                                            setStep3Open(true);\n                                            setTableOpen(false);\n                                        }\n                                    }}>\n                                        Import\n                                    </Button>\n                                </Col>\n                                <Col>\n                                    {/* <Button className=\"mb-3 mr-3\" onClick={() => {\n                                        setExportStrSimple();\n                                    }}>\n                                        Export\n                                    </Button> */}\n                                    <Button className=\"mb-3\" onClick={() => {\n                                        navigator.clipboard.writeText(exportStr);\n                                        // setImportExportOpen(false);\n                                        // setStep1Open(true);\n                                        // setStep2Open(true);\n                                        // setStep3Open(true);\n                                    }}>\n                                        Copy to Clipboard\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Collapse>\n                <Row>\n                    <Col style={{ cursor: 'pointer' }} onClick={() => {\n                        setStep1Open(!step1Open);\n                    }}>\n                        <h2>\n                            Step 1. Strategies\n                        </h2>\n                    </Col>\n                </Row>\n                <Collapse in={step1Open}>\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <p>\n                                        An investment strategy can be the same across different accounts. For example, you might have a 401k, HSA, and Roth IRA all with long-term growth as the goal, with the <b>same exact investments</b>, but just across different accounts. This is one specific investment <i>strategy</i>.\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    {\n                                        strategies.map((_strategy: Strategy, j: number): JSX.Element => {\n                                            return (\n                                                <StrategyView\n                                                    key={`strategyview-${j}`}\n                                                    idx={j}\n                                                    strategies={strategies}\n                                                    onStrategyNameChange={onStrategyNameChange}\n                                                    onStrategyAdd={addStrategy}\n                                                    onStrategyDel={delStrategy}\n                                                    onStrategySymbolAdd={onStrategySymbolAdd}\n                                                    onStrategySymbolDel={onStrategySymbolDel}\n                                                    onStrategySymbolChange={onStrategySymbolChange}\n                                                    onAllocationTypeChange={onAllocationTypeChange}\n                                                    onAllocationAmountChange={onAllocationAmountChange}\n                                                    onAllocationAdd={onAllocationAdd}\n                                                    onAllocationDel={onAllocationDel}\n                                                ></StrategyView>\n                                            )\n                                        })\n                                    }\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Button className=\"mb-3\"\n                                        onClick={() => {\n                                            setStep1Open(false)\n                                            setStep2Open(!step2Open)\n                                            setStep3Open(false)\n                                        }}>\n                                        Next step\n                                    </Button>\n                                </Col>\n                                <Col>\n                                    <Button\n                                        className=\"mb-3\"\n                                        variant=\"outline-primary\"\n                                        onClick={addStrategy}>\n                                        Add strategy\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Collapse>\n                <Row>\n                    <Col style={{ cursor: 'pointer' }} onClick={() => {\n                        setStep2Open(!step2Open);\n                    }}>\n                        <h2>\n                            Step 2. Set up Accounts\n                        </h2>\n                    </Col>\n                </Row>\n                <Collapse in={step2Open}>\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <p>\n                                        Next, you can create any number of accounts that you want, each with its own balance. Then, you can choose a strategy from above to assign to it.\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    {\n                                        accounts.map((_account: Account, idx: number) => {\n                                            return (\n                                                <AccountView\n                                                    key={`accountview-${idx}`}\n                                                    accounts={accounts}\n                                                    idx={idx}\n                                                    onAcctNameChange={onAcctNameChange}\n                                                    onAcctBalanceChange={onAcctBalanceChange}\n                                                    onAcctStrategyChange={onAcctStrategyChange}\n                                                    onAcctAdd={onAcctAdd}\n                                                    onAcctDel={onAcctDel}\n                                                    getStrategies={getStrategies}\n                                                />\n                                            )\n                                        })\n                                    }\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Button className=\"mb-3\"\n                                        onClick={() => {\n                                            setStep1Open(false)\n                                            setStep2Open(false)\n                                            setStep3Open(true)\n                                        }}>\n                                        Final step\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Collapse>\n                <Row>\n                    <Col style={{ cursor: 'pointer' }} onClick={() => {\n                        setStep3Open(!step3Open);\n                    }}>\n                        <h2>\n                            Step 3. Get results\n                        </h2>\n                    </Col>\n                </Row>\n                <Collapse in={step3Open}>\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <p>\n                                        Just click the \"Balance\" button to query the Yahoo Finance servers to get quotes for each symbol from above. A table below will populate, and you can copy the results as CSV, so that they can be pasted into your favorite spreadsheet processor.\n                                    </p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Button className=\"mb-3 mr-3\" onClick={() => {\n                                        let balancedResults: Result[] = [];\n                                        // todo: refactor\n                                        const allSymbols: any = {};\n                                        strategies.forEach((strategy: Strategy) => {\n                                            strategy.symbols.forEach((symbol: Symbol) => {\n                                                allSymbols[symbol.symbol] = symbol.symbol;\n                                            });\n                                        });\n                                        GetQuotes(Object.keys(allSymbols), useYahooDirect).then((quotes) => {\n                                            if (Array.isArray(quotes)) {\n                                                accounts.forEach((account: Account) => {\n                                                    strategies.forEach((strategy: Strategy) => {\n                                                        if (strategy.name.toLowerCase() === account.strategy.toLowerCase()) {\n                                                            // const r = BalanceAccount(account, strategy, [{ price: 50.0 }]); // for testing\n                                                            const r = BalanceAccount(account, strategy, quotes);\n                                                            console.log(r);\n                                                            balancedResults = [...balancedResults, ...r];\n                                                        }\n                                                    })\n                                                })\n                                                console.log(balancedResults);\n                                                setResults([...balancedResults]);\n                                                setTableOpen(true);\n                                                return;\n                                            }\n                                            console.error(`did not receive quotes from backend: ${JSON.stringify(quotes)}`);\n                                        });\n                                    }}>\n                                        Balance\n                                    </Button>\n                                    <Button className=\"mb-3 mr-3\" variant=\"outline-secondary\"\n                                        onClick={() => {\n                                            setUseYahooDirect(!useYahooDirect);\n                                        }}>\n                                        {useYahooDirect ? 'Use Direct Query' : 'Use Proxy (default)'}\n                                    </Button>\n                                </Col>\n                            </Row>\n                            <Collapse in={useYahooDirect}>\n                                <Row>\n                                    <Col>\n                                        <span className=\"text-muted small\">\n                                            Warning: When directly connecting to Yahoo's API through the browser, CORS manipulation is needed. Requests will fail unless you know what you're doing. If this sounds scary, just press the \"Use Proxy (default)\" button.<br /><br />\n                                            I have provided a proxy using an AWS API gateway and Lambda function that will query the Yahoo Finance servers and allow this website as an origin only.\n                                        </span>\n                                        {/* {useYahooDirect ? (\n                                            <span className=\"text-muted small\">\n                                                Warning: CORS extension is needed.\n                                            </span>\n                                        ) : (\n                                                <span className=\"text-muted small\">\n\n                                                </span>\n                                            )} */}\n                                    </Col>\n                                </Row>\n                            </Collapse>\n                            <Collapse in={tableOpen}>\n                                <Row>\n                                    <Col>\n                                        <Row>\n                                            <Col className=\"mb-3\">\n                                                {/* <ResultsView results={results} /> */}\n                                                <Table striped bordered hover responsive>\n                                                    <thead>\n                                                        <tr>\n                                                            <th>#</th>\n                                                            {\n                                                                ResultHeaders.map((header: string, i: number): JSX.Element => {\n                                                                    return (\n                                                                        <td key={`results-header-${i}`}>{header}</td>\n                                                                    )\n                                                                })\n                                                            }\n                                                        </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                        {\n                                                            results.map((result: Result, i: number): JSX.Element => {\n                                                                return (\n                                                                    <tr key={`results-row-${i}`}>\n                                                                        <td>{i + 1}</td>\n                                                                        <td>{result.name}</td>\n                                                                        <td>{result.symbol}</td>\n                                                                        <td>{result.type}</td>\n                                                                        <td>{result.shares}</td>\n                                                                        <td>{asCurrency(result.sharePrice)}</td>\n                                                                        <td>{asCurrency(result.purchasePrice)}</td>\n                                                                        <td>{asCurrency(result.allocated)}</td>\n                                                                        <td>{asCurrency(result.remainder)}</td>\n                                                                        <td>{asPercentage(result.symbolAllocationPercentage)}</td>\n                                                                        <td>{asPercentage(result.groupAllocationPercentage)}</td>\n                                                                        <td>{asCurrency(result.fromBalance)}</td>\n                                                                    </tr>\n                                                                )\n                                                            })\n                                                        }\n                                                    </tbody>\n                                                </Table>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col>\n                                                <Button className=\"mb-3 mr-3\" onClick={() => {\n                                                    navigator.clipboard.writeText(getResultsAsCSV(results));\n                                                }}>\n                                                    Copy as CSV\n                                                </Button>\n                                                <Button className=\"mb-3 mr-3\" onClick={() => {\n                                                    setStep1Open(true)\n                                                    setStep2Open(false)\n                                                    setStep3Open(false)\n                                                }}>\n                                                    Back to top\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                </Row>\n                            </Collapse>\n                        </Col>\n                    </Row>\n                </Collapse>\n            </Container>\n        </Container>\n    );\n}\n\nexport default InvestmentsView;\n","import { Config } from './models';\n\nexport const GetCompleteExample = (): Config => {\n    return {\n        strategies: [\n            {\n                name: \"Retirement\",\n                symbols: [\n                    { symbol: \"SCHA\", type: \"small\" },\n                    { symbol: \"SCHB\", type: \"broad\" },\n                    { symbol: \"SCHD\", type: \"large\" },\n                    { symbol: \"SCHF\", type: \"international\" },\n                    { symbol: \"SCHG\", type: \"large\" },\n                    { symbol: \"SCHX\", type: \"large\" },\n                ],\n                allocations: [\n                    { type: \"fixed\", amount: 5.0 },\n                    { type: \"small\", amount: 10.0 },\n                    { type: \"medium\", amount: 10.0 },\n                    { type: \"large\", amount: 10.0 },\n                    { type: \"international\", amount: 10.0 },\n                    { type: \"broad\", amount: 10.0 },\n                    { type: \"cash\", amount: 2.0 },\n                    { type: \"stock\", amount: 0.0 },\n                ]\n            },\n            {\n                name: \"Hodl\",\n                symbols: [\n                    { symbol: \"GME\", type: \"stock\" },\n                ],\n                allocations: [\n                    { type: \"cash\", amount: 2.0 },\n                    { type: \"stock\", amount: 98.0 },\n                ]\n            },\n            {\n                name: \"BigTechStocks\",\n                symbols: [\n                    { symbol: \"AAPL\", type: \"stock\" },\n                    { symbol: \"AMZN\", type: \"stock\" },\n                    { symbol: \"FB\", type: \"stock\" },\n                    { symbol: \"GOOG\", type: \"stock\" },\n                    { symbol: \"INTC\", type: \"stock\" },\n                    { symbol: \"AMD\", type: \"stock\" },\n                    { symbol: \"NVDA\", type: \"stock\" },\n                ],\n                allocations: [\n                    { type: \"cash\", amount: 2.0 },\n                    { type: \"stock\", amount: 98.0 },\n                ]\n            },\n        ],\n        accounts: [\n            { name: '401k', balance: 50500.0, strategy: 'Retirement' },\n            { name: 'Brokerage 1', balance: 10000.0, strategy: 'Hodl' },\n            { name: 'Brokerage 2', balance: 10000.0, strategy: 'BigTechStocks' },\n        ]\n\n    }\n};\n\nexport const GetEmptyExample = (): Config => {\n    return {\n        strategies: [\n            {\n                name: \"Retirement\",\n                symbols: [\n                    { symbol: \"SCHA\", type: \"small\" },\n                ],\n                allocations: [\n                    { type: \"broad\", amount: 10.0 },\n                ]\n            },\n        ],\n        accounts: [\n            { name: '401k', balance: 50500.0, strategy: 'Retirement' },\n        ]\n    }\n}\n\n\n// balances:\n// - name: Stonks\n// balance: 1000000\n// portfolio: Hodl\n//     - name: 401k\n// balance: 500000.00\n// portfolio: Retirement\n//     - name: HSA\n// balance: 50000.00\n// portfolio: Retirement\n","import React from 'react';\nimport './App.css';\nimport Container from 'react-bootstrap/Container';\nimport JumboView from './main/jumboview';\nimport InvestmentsView from './main/investments';\n\nconst App = function () {\n  return (\n    < React.Fragment >\n      {/* <JumboView\n        header='Invest Smarter!'\n        body='Use this simple tool to quickly allocate your financial accounts according to portfolios that you set up.'\n      ></JumboView> */}\n      <InvestmentsView></InvestmentsView>\n    </React.Fragment >\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}